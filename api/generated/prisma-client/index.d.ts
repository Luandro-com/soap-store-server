// Code generated by Prisma (prisma@1.26.4). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  address: (where?: AddressWhereInput) => Promise<boolean>;
  cart: (where?: CartWhereInput) => Promise<boolean>;
  cartItem: (where?: CartItemWhereInput) => Promise<boolean>;
  creditCard: (where?: CreditCardWhereInput) => Promise<boolean>;
  cupom: (where?: CupomWhereInput) => Promise<boolean>;
  newsletterSubscription: (
    where?: NewsletterSubscriptionWhereInput
  ) => Promise<boolean>;
  order: (where?: OrderWhereInput) => Promise<boolean>;
  orderShippingAddress: (
    where?: OrderShippingAddressWhereInput
  ) => Promise<boolean>;
  payment: (where?: PaymentWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  product: (where?: ProductWhereInput) => Promise<boolean>;
  productVariant: (where?: ProductVariantWhereInput) => Promise<boolean>;
  stores: (where?: StoresWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  address: (where: AddressWhereUniqueInput) => AddressPromise;
  addresses: (args?: {
    where?: AddressWhereInput;
    orderBy?: AddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Address>;
  addressesConnection: (args?: {
    where?: AddressWhereInput;
    orderBy?: AddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AddressConnectionPromise;
  cart: (where: CartWhereUniqueInput) => CartPromise;
  carts: (args?: {
    where?: CartWhereInput;
    orderBy?: CartOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Cart>;
  cartsConnection: (args?: {
    where?: CartWhereInput;
    orderBy?: CartOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CartConnectionPromise;
  cartItem: (where: CartItemWhereUniqueInput) => CartItemPromise;
  cartItems: (args?: {
    where?: CartItemWhereInput;
    orderBy?: CartItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<CartItem>;
  cartItemsConnection: (args?: {
    where?: CartItemWhereInput;
    orderBy?: CartItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CartItemConnectionPromise;
  creditCard: (where: CreditCardWhereUniqueInput) => CreditCardPromise;
  creditCards: (args?: {
    where?: CreditCardWhereInput;
    orderBy?: CreditCardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<CreditCard>;
  creditCardsConnection: (args?: {
    where?: CreditCardWhereInput;
    orderBy?: CreditCardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CreditCardConnectionPromise;
  cupom: (where: CupomWhereUniqueInput) => CupomPromise;
  cupoms: (args?: {
    where?: CupomWhereInput;
    orderBy?: CupomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Cupom>;
  cupomsConnection: (args?: {
    where?: CupomWhereInput;
    orderBy?: CupomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CupomConnectionPromise;
  newsletterSubscription: (
    where: NewsletterSubscriptionWhereUniqueInput
  ) => NewsletterSubscriptionPromise;
  newsletterSubscriptions: (args?: {
    where?: NewsletterSubscriptionWhereInput;
    orderBy?: NewsletterSubscriptionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<NewsletterSubscription>;
  newsletterSubscriptionsConnection: (args?: {
    where?: NewsletterSubscriptionWhereInput;
    orderBy?: NewsletterSubscriptionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => NewsletterSubscriptionConnectionPromise;
  order: (where: OrderWhereUniqueInput) => OrderPromise;
  orders: (args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Order>;
  ordersConnection: (args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OrderConnectionPromise;
  orderShippingAddress: (
    where: OrderShippingAddressWhereUniqueInput
  ) => OrderShippingAddressPromise;
  orderShippingAddresses: (args?: {
    where?: OrderShippingAddressWhereInput;
    orderBy?: OrderShippingAddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<OrderShippingAddress>;
  orderShippingAddressesConnection: (args?: {
    where?: OrderShippingAddressWhereInput;
    orderBy?: OrderShippingAddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OrderShippingAddressConnectionPromise;
  payment: (where: PaymentWhereUniqueInput) => PaymentPromise;
  payments: (args?: {
    where?: PaymentWhereInput;
    orderBy?: PaymentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Payment>;
  paymentsConnection: (args?: {
    where?: PaymentWhereInput;
    orderBy?: PaymentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PaymentConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostPromise;
  posts: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Post>;
  postsConnection: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PostConnectionPromise;
  product: (where: ProductWhereUniqueInput) => ProductPromise;
  products: (args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Product>;
  productsConnection: (args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProductConnectionPromise;
  productVariant: (
    where: ProductVariantWhereUniqueInput
  ) => ProductVariantPromise;
  productVariants: (args?: {
    where?: ProductVariantWhereInput;
    orderBy?: ProductVariantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ProductVariant>;
  productVariantsConnection: (args?: {
    where?: ProductVariantWhereInput;
    orderBy?: ProductVariantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProductVariantConnectionPromise;
  storeses: (args?: {
    where?: StoresWhereInput;
    orderBy?: StoresOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Stores>;
  storesesConnection: (args?: {
    where?: StoresWhereInput;
    orderBy?: StoresOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => StoresConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAddress: (data: AddressCreateInput) => AddressPromise;
  updateAddress: (args: {
    data: AddressUpdateInput;
    where: AddressWhereUniqueInput;
  }) => AddressPromise;
  updateManyAddresses: (args: {
    data: AddressUpdateManyMutationInput;
    where?: AddressWhereInput;
  }) => BatchPayloadPromise;
  upsertAddress: (args: {
    where: AddressWhereUniqueInput;
    create: AddressCreateInput;
    update: AddressUpdateInput;
  }) => AddressPromise;
  deleteAddress: (where: AddressWhereUniqueInput) => AddressPromise;
  deleteManyAddresses: (where?: AddressWhereInput) => BatchPayloadPromise;
  createCart: (data: CartCreateInput) => CartPromise;
  updateCart: (args: {
    data: CartUpdateInput;
    where: CartWhereUniqueInput;
  }) => CartPromise;
  upsertCart: (args: {
    where: CartWhereUniqueInput;
    create: CartCreateInput;
    update: CartUpdateInput;
  }) => CartPromise;
  deleteCart: (where: CartWhereUniqueInput) => CartPromise;
  deleteManyCarts: (where?: CartWhereInput) => BatchPayloadPromise;
  createCartItem: (data: CartItemCreateInput) => CartItemPromise;
  updateCartItem: (args: {
    data: CartItemUpdateInput;
    where: CartItemWhereUniqueInput;
  }) => CartItemPromise;
  updateManyCartItems: (args: {
    data: CartItemUpdateManyMutationInput;
    where?: CartItemWhereInput;
  }) => BatchPayloadPromise;
  upsertCartItem: (args: {
    where: CartItemWhereUniqueInput;
    create: CartItemCreateInput;
    update: CartItemUpdateInput;
  }) => CartItemPromise;
  deleteCartItem: (where: CartItemWhereUniqueInput) => CartItemPromise;
  deleteManyCartItems: (where?: CartItemWhereInput) => BatchPayloadPromise;
  createCreditCard: (data: CreditCardCreateInput) => CreditCardPromise;
  updateCreditCard: (args: {
    data: CreditCardUpdateInput;
    where: CreditCardWhereUniqueInput;
  }) => CreditCardPromise;
  updateManyCreditCards: (args: {
    data: CreditCardUpdateManyMutationInput;
    where?: CreditCardWhereInput;
  }) => BatchPayloadPromise;
  upsertCreditCard: (args: {
    where: CreditCardWhereUniqueInput;
    create: CreditCardCreateInput;
    update: CreditCardUpdateInput;
  }) => CreditCardPromise;
  deleteCreditCard: (where: CreditCardWhereUniqueInput) => CreditCardPromise;
  deleteManyCreditCards: (where?: CreditCardWhereInput) => BatchPayloadPromise;
  createCupom: (data: CupomCreateInput) => CupomPromise;
  updateCupom: (args: {
    data: CupomUpdateInput;
    where: CupomWhereUniqueInput;
  }) => CupomPromise;
  updateManyCupoms: (args: {
    data: CupomUpdateManyMutationInput;
    where?: CupomWhereInput;
  }) => BatchPayloadPromise;
  upsertCupom: (args: {
    where: CupomWhereUniqueInput;
    create: CupomCreateInput;
    update: CupomUpdateInput;
  }) => CupomPromise;
  deleteCupom: (where: CupomWhereUniqueInput) => CupomPromise;
  deleteManyCupoms: (where?: CupomWhereInput) => BatchPayloadPromise;
  createNewsletterSubscription: (
    data: NewsletterSubscriptionCreateInput
  ) => NewsletterSubscriptionPromise;
  updateNewsletterSubscription: (args: {
    data: NewsletterSubscriptionUpdateInput;
    where: NewsletterSubscriptionWhereUniqueInput;
  }) => NewsletterSubscriptionPromise;
  updateManyNewsletterSubscriptions: (args: {
    data: NewsletterSubscriptionUpdateManyMutationInput;
    where?: NewsletterSubscriptionWhereInput;
  }) => BatchPayloadPromise;
  upsertNewsletterSubscription: (args: {
    where: NewsletterSubscriptionWhereUniqueInput;
    create: NewsletterSubscriptionCreateInput;
    update: NewsletterSubscriptionUpdateInput;
  }) => NewsletterSubscriptionPromise;
  deleteNewsletterSubscription: (
    where: NewsletterSubscriptionWhereUniqueInput
  ) => NewsletterSubscriptionPromise;
  deleteManyNewsletterSubscriptions: (
    where?: NewsletterSubscriptionWhereInput
  ) => BatchPayloadPromise;
  createOrder: (data: OrderCreateInput) => OrderPromise;
  updateOrder: (args: {
    data: OrderUpdateInput;
    where: OrderWhereUniqueInput;
  }) => OrderPromise;
  updateManyOrders: (args: {
    data: OrderUpdateManyMutationInput;
    where?: OrderWhereInput;
  }) => BatchPayloadPromise;
  upsertOrder: (args: {
    where: OrderWhereUniqueInput;
    create: OrderCreateInput;
    update: OrderUpdateInput;
  }) => OrderPromise;
  deleteOrder: (where: OrderWhereUniqueInput) => OrderPromise;
  deleteManyOrders: (where?: OrderWhereInput) => BatchPayloadPromise;
  createOrderShippingAddress: (
    data: OrderShippingAddressCreateInput
  ) => OrderShippingAddressPromise;
  updateOrderShippingAddress: (args: {
    data: OrderShippingAddressUpdateInput;
    where: OrderShippingAddressWhereUniqueInput;
  }) => OrderShippingAddressPromise;
  updateManyOrderShippingAddresses: (args: {
    data: OrderShippingAddressUpdateManyMutationInput;
    where?: OrderShippingAddressWhereInput;
  }) => BatchPayloadPromise;
  upsertOrderShippingAddress: (args: {
    where: OrderShippingAddressWhereUniqueInput;
    create: OrderShippingAddressCreateInput;
    update: OrderShippingAddressUpdateInput;
  }) => OrderShippingAddressPromise;
  deleteOrderShippingAddress: (
    where: OrderShippingAddressWhereUniqueInput
  ) => OrderShippingAddressPromise;
  deleteManyOrderShippingAddresses: (
    where?: OrderShippingAddressWhereInput
  ) => BatchPayloadPromise;
  createPayment: (data: PaymentCreateInput) => PaymentPromise;
  updatePayment: (args: {
    data: PaymentUpdateInput;
    where: PaymentWhereUniqueInput;
  }) => PaymentPromise;
  updateManyPayments: (args: {
    data: PaymentUpdateManyMutationInput;
    where?: PaymentWhereInput;
  }) => BatchPayloadPromise;
  upsertPayment: (args: {
    where: PaymentWhereUniqueInput;
    create: PaymentCreateInput;
    update: PaymentUpdateInput;
  }) => PaymentPromise;
  deletePayment: (where: PaymentWhereUniqueInput) => PaymentPromise;
  deleteManyPayments: (where?: PaymentWhereInput) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (args: {
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
  }) => PostPromise;
  updateManyPosts: (args: {
    data: PostUpdateManyMutationInput;
    where?: PostWhereInput;
  }) => BatchPayloadPromise;
  upsertPost: (args: {
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
  }) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createProduct: (data: ProductCreateInput) => ProductPromise;
  updateProduct: (args: {
    data: ProductUpdateInput;
    where: ProductWhereUniqueInput;
  }) => ProductPromise;
  updateManyProducts: (args: {
    data: ProductUpdateManyMutationInput;
    where?: ProductWhereInput;
  }) => BatchPayloadPromise;
  upsertProduct: (args: {
    where: ProductWhereUniqueInput;
    create: ProductCreateInput;
    update: ProductUpdateInput;
  }) => ProductPromise;
  deleteProduct: (where: ProductWhereUniqueInput) => ProductPromise;
  deleteManyProducts: (where?: ProductWhereInput) => BatchPayloadPromise;
  createProductVariant: (
    data: ProductVariantCreateInput
  ) => ProductVariantPromise;
  updateProductVariant: (args: {
    data: ProductVariantUpdateInput;
    where: ProductVariantWhereUniqueInput;
  }) => ProductVariantPromise;
  updateManyProductVariants: (args: {
    data: ProductVariantUpdateManyMutationInput;
    where?: ProductVariantWhereInput;
  }) => BatchPayloadPromise;
  upsertProductVariant: (args: {
    where: ProductVariantWhereUniqueInput;
    create: ProductVariantCreateInput;
    update: ProductVariantUpdateInput;
  }) => ProductVariantPromise;
  deleteProductVariant: (
    where: ProductVariantWhereUniqueInput
  ) => ProductVariantPromise;
  deleteManyProductVariants: (
    where?: ProductVariantWhereInput
  ) => BatchPayloadPromise;
  createStores: (data: StoresCreateInput) => StoresPromise;
  updateManyStoreses: (args: {
    data: StoresUpdateManyMutationInput;
    where?: StoresWhereInput;
  }) => BatchPayloadPromise;
  deleteManyStoreses: (where?: StoresWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  address: (
    where?: AddressSubscriptionWhereInput
  ) => AddressSubscriptionPayloadSubscription;
  cart: (
    where?: CartSubscriptionWhereInput
  ) => CartSubscriptionPayloadSubscription;
  cartItem: (
    where?: CartItemSubscriptionWhereInput
  ) => CartItemSubscriptionPayloadSubscription;
  creditCard: (
    where?: CreditCardSubscriptionWhereInput
  ) => CreditCardSubscriptionPayloadSubscription;
  cupom: (
    where?: CupomSubscriptionWhereInput
  ) => CupomSubscriptionPayloadSubscription;
  newsletterSubscription: (
    where?: NewsletterSubscriptionSubscriptionWhereInput
  ) => NewsletterSubscriptionSubscriptionPayloadSubscription;
  order: (
    where?: OrderSubscriptionWhereInput
  ) => OrderSubscriptionPayloadSubscription;
  orderShippingAddress: (
    where?: OrderShippingAddressSubscriptionWhereInput
  ) => OrderShippingAddressSubscriptionPayloadSubscription;
  payment: (
    where?: PaymentSubscriptionWhereInput
  ) => PaymentSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  product: (
    where?: ProductSubscriptionWhereInput
  ) => ProductSubscriptionPayloadSubscription;
  productVariant: (
    where?: ProductVariantSubscriptionWhereInput
  ) => ProductVariantSubscriptionPayloadSubscription;
  stores: (
    where?: StoresSubscriptionWhereInput
  ) => StoresSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Role = "ADMIN" | "EDITOR" | "CUSTOMER" | "DELIVERY";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "isPublished_ASC"
  | "isPublished_DESC"
  | "title_ASC"
  | "title_DESC"
  | "body_ASC"
  | "body_DESC";

export type CreditCardOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "cardNumber_ASC"
  | "cardNumber_DESC"
  | "holder_ASC"
  | "holder_DESC"
  | "expirationDate_ASC"
  | "expirationDate_DESC"
  | "saveCard_ASC"
  | "saveCard_DESC"
  | "brand_ASC"
  | "brand_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type AddressType = "BILLING" | "SHIPPING";

export type CartOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type StoresOrderByInput =
  | "latitude_ASC"
  | "latitude_DESC"
  | "longitude_ASC"
  | "longitude_DESC"
  | "image_ASC"
  | "image_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "address_ASC"
  | "address_DESC"
  | "city_ASC"
  | "city_DESC"
  | "zip_ASC"
  | "zip_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type OrderStatus =
  | "WAITING_PAYMENT"
  | "CANCELED"
  | "PACKAGING"
  | "SHIPPED"
  | "DELIVERED";

export type OrderShippingAddressOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "street_ASC"
  | "street_DESC"
  | "number_ASC"
  | "number_DESC"
  | "complement_ASC"
  | "complement_DESC"
  | "zip_ASC"
  | "zip_DESC"
  | "district_ASC"
  | "district_DESC"
  | "city_ASC"
  | "city_DESC"
  | "state_ASC"
  | "state_DESC"
  | "country_ASC"
  | "country_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PaymentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "paymentId_ASC"
  | "paymentId_DESC"
  | "type_ASC"
  | "type_DESC"
  | "currency_ASC"
  | "currency_DESC"
  | "merchantOrderId_ASC"
  | "merchantOrderId_DESC"
  | "customerName_ASC"
  | "customerName_DESC"
  | "tid_ASC"
  | "tid_DESC"
  | "proofOfSale_ASC"
  | "proofOfSale_DESC"
  | "authorizationCode_ASC"
  | "authorizationCode_DESC"
  | "softDescriptor_ASC"
  | "softDescriptor_DESC"
  | "provider_ASC"
  | "provider_DESC"
  | "amount_ASC"
  | "amount_DESC"
  | "serviceTaxAmount_ASC"
  | "serviceTaxAmount_DESC"
  | "installments_ASC"
  | "installments_DESC"
  | "interest_ASC"
  | "interest_DESC"
  | "capture_ASC"
  | "capture_DESC"
  | "authenticate_ASC"
  | "authenticate_DESC"
  | "recurrent_ASC"
  | "recurrent_DESC"
  | "receivedDate_ASC"
  | "receivedDate_DESC"
  | "status_ASC"
  | "status_DESC"
  | "isSplitted_ASC"
  | "isSplitted_DESC"
  | "returnMessage_ASC"
  | "returnMessage_DESC"
  | "returnCode_ASC"
  | "returnCode_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type CupomOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "discount_ASC"
  | "discount_DESC"
  | "code_ASC"
  | "code_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type AddressOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "street_ASC"
  | "street_DESC"
  | "number_ASC"
  | "number_DESC"
  | "complement_ASC"
  | "complement_DESC"
  | "zip_ASC"
  | "zip_DESC"
  | "district_ASC"
  | "district_DESC"
  | "city_ASC"
  | "city_DESC"
  | "state_ASC"
  | "state_DESC"
  | "country_ASC"
  | "country_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type OrderOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "recurrying_ASC"
  | "recurrying_DESC"
  | "status_ASC"
  | "status_DESC"
  | "subTotalPrice_ASC"
  | "subTotalPrice_DESC"
  | "totalShippingPrice_ASC"
  | "totalShippingPrice_DESC"
  | "totalPrice_ASC"
  | "totalPrice_DESC"
  | "processedAt_ASC"
  | "processedAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type CartItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "quantity_ASC"
  | "quantity_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProductVariantOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "information_ASC"
  | "information_DESC"
  | "image_ASC"
  | "image_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type NewsletterSubscriptionOrderByInput =
  | "email_ASC"
  | "email_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProductOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "price_ASC"
  | "price_DESC"
  | "name_ASC"
  | "name_DESC"
  | "stockQuantity_ASC"
  | "stockQuantity_DESC"
  | "description_ASC"
  | "description_DESC"
  | "image_ASC"
  | "image_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "subscribed_ASC"
  | "subscribed_DESC"
  | "role_ASC"
  | "role_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export interface CartItemUpdateManyWithoutCartInput {
  create?: CartItemCreateWithoutCartInput[] | CartItemCreateWithoutCartInput;
  delete?: CartItemWhereUniqueInput[] | CartItemWhereUniqueInput;
  connect?: CartItemWhereUniqueInput[] | CartItemWhereUniqueInput;
  set?: CartItemWhereUniqueInput[] | CartItemWhereUniqueInput;
  disconnect?: CartItemWhereUniqueInput[] | CartItemWhereUniqueInput;
  update?:
    | CartItemUpdateWithWhereUniqueWithoutCartInput[]
    | CartItemUpdateWithWhereUniqueWithoutCartInput;
  upsert?:
    | CartItemUpsertWithWhereUniqueWithoutCartInput[]
    | CartItemUpsertWithWhereUniqueWithoutCartInput;
  deleteMany?: CartItemScalarWhereInput[] | CartItemScalarWhereInput;
  updateMany?:
    | CartItemUpdateManyWithWhereNestedInput[]
    | CartItemUpdateManyWithWhereNestedInput;
}

export type AddressWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ProductVariantUpdateManyWithWhereNestedInput {
  where: ProductVariantScalarWhereInput;
  data: ProductVariantUpdateManyDataInput;
}

export interface PaymentWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  paymentId?: String;
  paymentId_not?: String;
  paymentId_in?: String[] | String;
  paymentId_not_in?: String[] | String;
  paymentId_lt?: String;
  paymentId_lte?: String;
  paymentId_gt?: String;
  paymentId_gte?: String;
  paymentId_contains?: String;
  paymentId_not_contains?: String;
  paymentId_starts_with?: String;
  paymentId_not_starts_with?: String;
  paymentId_ends_with?: String;
  paymentId_not_ends_with?: String;
  type?: String;
  type_not?: String;
  type_in?: String[] | String;
  type_not_in?: String[] | String;
  type_lt?: String;
  type_lte?: String;
  type_gt?: String;
  type_gte?: String;
  type_contains?: String;
  type_not_contains?: String;
  type_starts_with?: String;
  type_not_starts_with?: String;
  type_ends_with?: String;
  type_not_ends_with?: String;
  currency?: String;
  currency_not?: String;
  currency_in?: String[] | String;
  currency_not_in?: String[] | String;
  currency_lt?: String;
  currency_lte?: String;
  currency_gt?: String;
  currency_gte?: String;
  currency_contains?: String;
  currency_not_contains?: String;
  currency_starts_with?: String;
  currency_not_starts_with?: String;
  currency_ends_with?: String;
  currency_not_ends_with?: String;
  creditCard?: CreditCardWhereInput;
  customer?: UserWhereInput;
  merchantOrderId?: String;
  merchantOrderId_not?: String;
  merchantOrderId_in?: String[] | String;
  merchantOrderId_not_in?: String[] | String;
  merchantOrderId_lt?: String;
  merchantOrderId_lte?: String;
  merchantOrderId_gt?: String;
  merchantOrderId_gte?: String;
  merchantOrderId_contains?: String;
  merchantOrderId_not_contains?: String;
  merchantOrderId_starts_with?: String;
  merchantOrderId_not_starts_with?: String;
  merchantOrderId_ends_with?: String;
  merchantOrderId_not_ends_with?: String;
  customerName?: String;
  customerName_not?: String;
  customerName_in?: String[] | String;
  customerName_not_in?: String[] | String;
  customerName_lt?: String;
  customerName_lte?: String;
  customerName_gt?: String;
  customerName_gte?: String;
  customerName_contains?: String;
  customerName_not_contains?: String;
  customerName_starts_with?: String;
  customerName_not_starts_with?: String;
  customerName_ends_with?: String;
  customerName_not_ends_with?: String;
  order?: OrderWhereInput;
  tid?: String;
  tid_not?: String;
  tid_in?: String[] | String;
  tid_not_in?: String[] | String;
  tid_lt?: String;
  tid_lte?: String;
  tid_gt?: String;
  tid_gte?: String;
  tid_contains?: String;
  tid_not_contains?: String;
  tid_starts_with?: String;
  tid_not_starts_with?: String;
  tid_ends_with?: String;
  tid_not_ends_with?: String;
  proofOfSale?: String;
  proofOfSale_not?: String;
  proofOfSale_in?: String[] | String;
  proofOfSale_not_in?: String[] | String;
  proofOfSale_lt?: String;
  proofOfSale_lte?: String;
  proofOfSale_gt?: String;
  proofOfSale_gte?: String;
  proofOfSale_contains?: String;
  proofOfSale_not_contains?: String;
  proofOfSale_starts_with?: String;
  proofOfSale_not_starts_with?: String;
  proofOfSale_ends_with?: String;
  proofOfSale_not_ends_with?: String;
  authorizationCode?: String;
  authorizationCode_not?: String;
  authorizationCode_in?: String[] | String;
  authorizationCode_not_in?: String[] | String;
  authorizationCode_lt?: String;
  authorizationCode_lte?: String;
  authorizationCode_gt?: String;
  authorizationCode_gte?: String;
  authorizationCode_contains?: String;
  authorizationCode_not_contains?: String;
  authorizationCode_starts_with?: String;
  authorizationCode_not_starts_with?: String;
  authorizationCode_ends_with?: String;
  authorizationCode_not_ends_with?: String;
  softDescriptor?: String;
  softDescriptor_not?: String;
  softDescriptor_in?: String[] | String;
  softDescriptor_not_in?: String[] | String;
  softDescriptor_lt?: String;
  softDescriptor_lte?: String;
  softDescriptor_gt?: String;
  softDescriptor_gte?: String;
  softDescriptor_contains?: String;
  softDescriptor_not_contains?: String;
  softDescriptor_starts_with?: String;
  softDescriptor_not_starts_with?: String;
  softDescriptor_ends_with?: String;
  softDescriptor_not_ends_with?: String;
  provider?: String;
  provider_not?: String;
  provider_in?: String[] | String;
  provider_not_in?: String[] | String;
  provider_lt?: String;
  provider_lte?: String;
  provider_gt?: String;
  provider_gte?: String;
  provider_contains?: String;
  provider_not_contains?: String;
  provider_starts_with?: String;
  provider_not_starts_with?: String;
  provider_ends_with?: String;
  provider_not_ends_with?: String;
  amount?: Int;
  amount_not?: Int;
  amount_in?: Int[] | Int;
  amount_not_in?: Int[] | Int;
  amount_lt?: Int;
  amount_lte?: Int;
  amount_gt?: Int;
  amount_gte?: Int;
  serviceTaxAmount?: Int;
  serviceTaxAmount_not?: Int;
  serviceTaxAmount_in?: Int[] | Int;
  serviceTaxAmount_not_in?: Int[] | Int;
  serviceTaxAmount_lt?: Int;
  serviceTaxAmount_lte?: Int;
  serviceTaxAmount_gt?: Int;
  serviceTaxAmount_gte?: Int;
  installments?: Int;
  installments_not?: Int;
  installments_in?: Int[] | Int;
  installments_not_in?: Int[] | Int;
  installments_lt?: Int;
  installments_lte?: Int;
  installments_gt?: Int;
  installments_gte?: Int;
  interest?: Int;
  interest_not?: Int;
  interest_in?: Int[] | Int;
  interest_not_in?: Int[] | Int;
  interest_lt?: Int;
  interest_lte?: Int;
  interest_gt?: Int;
  interest_gte?: Int;
  capture?: Boolean;
  capture_not?: Boolean;
  authenticate?: Boolean;
  authenticate_not?: Boolean;
  recurrent?: Boolean;
  recurrent_not?: Boolean;
  receivedDate?: DateTimeInput;
  receivedDate_not?: DateTimeInput;
  receivedDate_in?: DateTimeInput[] | DateTimeInput;
  receivedDate_not_in?: DateTimeInput[] | DateTimeInput;
  receivedDate_lt?: DateTimeInput;
  receivedDate_lte?: DateTimeInput;
  receivedDate_gt?: DateTimeInput;
  receivedDate_gte?: DateTimeInput;
  cupom?: CupomWhereInput;
  status?: Int;
  status_not?: Int;
  status_in?: Int[] | Int;
  status_not_in?: Int[] | Int;
  status_lt?: Int;
  status_lte?: Int;
  status_gt?: Int;
  status_gte?: Int;
  isSplitted?: Boolean;
  isSplitted_not?: Boolean;
  returnMessage?: String;
  returnMessage_not?: String;
  returnMessage_in?: String[] | String;
  returnMessage_not_in?: String[] | String;
  returnMessage_lt?: String;
  returnMessage_lte?: String;
  returnMessage_gt?: String;
  returnMessage_gte?: String;
  returnMessage_contains?: String;
  returnMessage_not_contains?: String;
  returnMessage_starts_with?: String;
  returnMessage_not_starts_with?: String;
  returnMessage_ends_with?: String;
  returnMessage_not_ends_with?: String;
  returnCode?: String;
  returnCode_not?: String;
  returnCode_in?: String[] | String;
  returnCode_not_in?: String[] | String;
  returnCode_lt?: String;
  returnCode_lte?: String;
  returnCode_gt?: String;
  returnCode_gte?: String;
  returnCode_contains?: String;
  returnCode_not_contains?: String;
  returnCode_starts_with?: String;
  returnCode_not_starts_with?: String;
  returnCode_ends_with?: String;
  returnCode_not_ends_with?: String;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  AND?: PaymentWhereInput[] | PaymentWhereInput;
  OR?: PaymentWhereInput[] | PaymentWhereInput;
  NOT?: PaymentWhereInput[] | PaymentWhereInput;
}

export interface ProductVariantUpdateManyDataInput {
  name?: String;
  information?: String;
  image?: String;
}

export interface CupomWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  discount?: Int;
  discount_not?: Int;
  discount_in?: Int[] | Int;
  discount_not_in?: Int[] | Int;
  discount_lt?: Int;
  discount_lte?: Int;
  discount_gt?: Int;
  discount_gte?: Int;
  code?: String;
  code_not?: String;
  code_in?: String[] | String;
  code_not_in?: String[] | String;
  code_lt?: String;
  code_lte?: String;
  code_gt?: String;
  code_gte?: String;
  code_contains?: String;
  code_not_contains?: String;
  code_starts_with?: String;
  code_not_starts_with?: String;
  code_ends_with?: String;
  code_not_ends_with?: String;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: CupomWhereInput[] | CupomWhereInput;
  OR?: CupomWhereInput[] | CupomWhereInput;
  NOT?: CupomWhereInput[] | CupomWhereInput;
}

export interface AddressCreateWithoutCustomerInput {
  type?: AddressType;
  street: String;
  number: String;
  complement?: String;
  zip: String;
  district?: String;
  city?: String;
  state?: String;
  country?: String;
  firstName: String;
  lastName: String;
}

export interface AddressUpdateManyMutationInput {
  type?: AddressType;
  street?: String;
  number?: String;
  complement?: String;
  zip?: String;
  district?: String;
  city?: String;
  state?: String;
  country?: String;
  firstName?: String;
  lastName?: String;
}

export interface PaymentCreateManyWithoutCustomerInput {
  create?:
    | PaymentCreateWithoutCustomerInput[]
    | PaymentCreateWithoutCustomerInput;
  connect?: PaymentWhereUniqueInput[] | PaymentWhereUniqueInput;
}

export interface ProductUpsertNestedInput {
  update: ProductUpdateDataInput;
  create: ProductCreateInput;
}

export interface PaymentCreateWithoutCustomerInput {
  paymentId?: String;
  type: String;
  currency?: String;
  creditCard?: CreditCardCreateOneInput;
  merchantOrderId: String;
  customerName?: String;
  order: OrderCreateOneWithoutPaymentInput;
  tid?: String;
  proofOfSale?: String;
  authorizationCode?: String;
  softDescriptor?: String;
  provider?: String;
  amount?: Int;
  serviceTaxAmount?: Int;
  installments?: Int;
  interest?: Int;
  capture?: Boolean;
  authenticate?: Boolean;
  recurrent?: Boolean;
  receivedDate?: DateTimeInput;
  cupom?: CupomCreateOneInput;
  status?: Int;
  isSplitted?: Boolean;
  returnMessage?: String;
  returnCode?: String;
}

export interface StoresSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: StoresWhereInput;
  AND?: StoresSubscriptionWhereInput[] | StoresSubscriptionWhereInput;
  OR?: StoresSubscriptionWhereInput[] | StoresSubscriptionWhereInput;
  NOT?: StoresSubscriptionWhereInput[] | StoresSubscriptionWhereInput;
}

export interface CreditCardCreateOneInput {
  create?: CreditCardCreateInput;
  connect?: CreditCardWhereUniqueInput;
}

export interface ProductWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  price?: Int;
  price_not?: Int;
  price_in?: Int[] | Int;
  price_not_in?: Int[] | Int;
  price_lt?: Int;
  price_lte?: Int;
  price_gt?: Int;
  price_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  stockQuantity?: Int;
  stockQuantity_not?: Int;
  stockQuantity_in?: Int[] | Int;
  stockQuantity_not_in?: Int[] | Int;
  stockQuantity_lt?: Int;
  stockQuantity_lte?: Int;
  stockQuantity_gt?: Int;
  stockQuantity_gte?: Int;
  variants_every?: ProductVariantWhereInput;
  variants_some?: ProductVariantWhereInput;
  variants_none?: ProductVariantWhereInput;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  image?: String;
  image_not?: String;
  image_in?: String[] | String;
  image_not_in?: String[] | String;
  image_lt?: String;
  image_lte?: String;
  image_gt?: String;
  image_gte?: String;
  image_contains?: String;
  image_not_contains?: String;
  image_starts_with?: String;
  image_not_starts_with?: String;
  image_ends_with?: String;
  image_not_ends_with?: String;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: ProductWhereInput[] | ProductWhereInput;
  OR?: ProductWhereInput[] | ProductWhereInput;
  NOT?: ProductWhereInput[] | ProductWhereInput;
}

export interface CreditCardCreateInput {
  cardNumber: String;
  holder: String;
  expirationDate: String;
  saveCard?: Boolean;
  brand: String;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PostWhereInput;
  AND?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  OR?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  NOT?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
}

export interface OrderCreateOneWithoutPaymentInput {
  create?: OrderCreateWithoutPaymentInput;
  connect?: OrderWhereUniqueInput;
}

export interface PaymentSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PaymentWhereInput;
  AND?: PaymentSubscriptionWhereInput[] | PaymentSubscriptionWhereInput;
  OR?: PaymentSubscriptionWhereInput[] | PaymentSubscriptionWhereInput;
  NOT?: PaymentSubscriptionWhereInput[] | PaymentSubscriptionWhereInput;
}

export interface OrderCreateWithoutPaymentInput {
  recurrying?: Boolean;
  status?: OrderStatus;
  cart: CartCreateOneInput;
  subTotalPrice: Int;
  totalShippingPrice?: Int;
  totalPrice: Int;
  customer: UserCreateOneWithoutOrdersInput;
  processedAt?: DateTimeInput;
  shippingAddress: OrderShippingAddressCreateOneWithoutOrderInput;
}

export interface OrderSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: OrderWhereInput;
  AND?: OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput;
  OR?: OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput;
  NOT?: OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput;
}

export interface UserCreateOneWithoutOrdersInput {
  create?: UserCreateWithoutOrdersInput;
  connect?: UserWhereUniqueInput;
}

export interface CupomSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CupomWhereInput;
  AND?: CupomSubscriptionWhereInput[] | CupomSubscriptionWhereInput;
  OR?: CupomSubscriptionWhereInput[] | CupomSubscriptionWhereInput;
  NOT?: CupomSubscriptionWhereInput[] | CupomSubscriptionWhereInput;
}

export interface UserCreateWithoutOrdersInput {
  email: String;
  password: String;
  firstName?: String;
  lastName?: String;
  posts?: PostCreateManyWithoutAuthorInput;
  subscribed?: Boolean;
  role?: Role;
  addresses?: AddressCreateManyWithoutCustomerInput;
  cart: CartCreateOneWithoutCustomerInput;
  payments?: PaymentCreateManyWithoutCustomerInput;
}

export interface CreditCardSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CreditCardWhereInput;
  AND?: CreditCardSubscriptionWhereInput[] | CreditCardSubscriptionWhereInput;
  OR?: CreditCardSubscriptionWhereInput[] | CreditCardSubscriptionWhereInput;
  NOT?: CreditCardSubscriptionWhereInput[] | CreditCardSubscriptionWhereInput;
}

export interface CartCreateOneWithoutCustomerInput {
  create?: CartCreateWithoutCustomerInput;
  connect?: CartWhereUniqueInput;
}

export interface CartSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CartWhereInput;
  AND?: CartSubscriptionWhereInput[] | CartSubscriptionWhereInput;
  OR?: CartSubscriptionWhereInput[] | CartSubscriptionWhereInput;
  NOT?: CartSubscriptionWhereInput[] | CartSubscriptionWhereInput;
}

export interface CartCreateWithoutCustomerInput {
  products?: CartItemCreateManyWithoutCartInput;
}

export type CartWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface OrderShippingAddressCreateOneWithoutOrderInput {
  create?: OrderShippingAddressCreateWithoutOrderInput;
  connect?: OrderShippingAddressWhereUniqueInput;
}

export interface UserUpdateManyMutationInput {
  email?: String;
  password?: String;
  firstName?: String;
  lastName?: String;
  subscribed?: Boolean;
  role?: Role;
}

export interface OrderShippingAddressCreateWithoutOrderInput {
  street: String;
  number: String;
  complement?: String;
  zip: String;
  district?: String;
  city?: String;
  state?: String;
  country?: String;
  firstName: String;
  lastName: String;
}

export interface UserCreateInput {
  email: String;
  password: String;
  firstName?: String;
  lastName?: String;
  posts?: PostCreateManyWithoutAuthorInput;
  subscribed?: Boolean;
  role?: Role;
  addresses?: AddressCreateManyWithoutCustomerInput;
  orders?: OrderCreateManyWithoutCustomerInput;
  cart: CartCreateOneWithoutCustomerInput;
  payments?: PaymentCreateManyWithoutCustomerInput;
}

export interface CupomCreateOneInput {
  create?: CupomCreateInput;
  connect?: CupomWhereUniqueInput;
}

export interface StoresUpdateManyMutationInput {
  latitude?: Float;
  longitude?: Float;
  image?: String;
  name?: String;
  description?: String;
  address?: String;
  city?: String;
  zip?: String;
}

export interface CupomCreateInput {
  discount: Int;
  code: String;
}

export interface ProductVariantUpdateManyMutationInput {
  name?: String;
  information?: String;
  image?: String;
}

export interface PaymentCreateOneWithoutOrderInput {
  create?: PaymentCreateWithoutOrderInput;
  connect?: PaymentWhereUniqueInput;
}

export interface AddressWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  type?: AddressType;
  type_not?: AddressType;
  type_in?: AddressType[] | AddressType;
  type_not_in?: AddressType[] | AddressType;
  street?: String;
  street_not?: String;
  street_in?: String[] | String;
  street_not_in?: String[] | String;
  street_lt?: String;
  street_lte?: String;
  street_gt?: String;
  street_gte?: String;
  street_contains?: String;
  street_not_contains?: String;
  street_starts_with?: String;
  street_not_starts_with?: String;
  street_ends_with?: String;
  street_not_ends_with?: String;
  number?: String;
  number_not?: String;
  number_in?: String[] | String;
  number_not_in?: String[] | String;
  number_lt?: String;
  number_lte?: String;
  number_gt?: String;
  number_gte?: String;
  number_contains?: String;
  number_not_contains?: String;
  number_starts_with?: String;
  number_not_starts_with?: String;
  number_ends_with?: String;
  number_not_ends_with?: String;
  complement?: String;
  complement_not?: String;
  complement_in?: String[] | String;
  complement_not_in?: String[] | String;
  complement_lt?: String;
  complement_lte?: String;
  complement_gt?: String;
  complement_gte?: String;
  complement_contains?: String;
  complement_not_contains?: String;
  complement_starts_with?: String;
  complement_not_starts_with?: String;
  complement_ends_with?: String;
  complement_not_ends_with?: String;
  zip?: String;
  zip_not?: String;
  zip_in?: String[] | String;
  zip_not_in?: String[] | String;
  zip_lt?: String;
  zip_lte?: String;
  zip_gt?: String;
  zip_gte?: String;
  zip_contains?: String;
  zip_not_contains?: String;
  zip_starts_with?: String;
  zip_not_starts_with?: String;
  zip_ends_with?: String;
  zip_not_ends_with?: String;
  district?: String;
  district_not?: String;
  district_in?: String[] | String;
  district_not_in?: String[] | String;
  district_lt?: String;
  district_lte?: String;
  district_gt?: String;
  district_gte?: String;
  district_contains?: String;
  district_not_contains?: String;
  district_starts_with?: String;
  district_not_starts_with?: String;
  district_ends_with?: String;
  district_not_ends_with?: String;
  city?: String;
  city_not?: String;
  city_in?: String[] | String;
  city_not_in?: String[] | String;
  city_lt?: String;
  city_lte?: String;
  city_gt?: String;
  city_gte?: String;
  city_contains?: String;
  city_not_contains?: String;
  city_starts_with?: String;
  city_not_starts_with?: String;
  city_ends_with?: String;
  city_not_ends_with?: String;
  state?: String;
  state_not?: String;
  state_in?: String[] | String;
  state_not_in?: String[] | String;
  state_lt?: String;
  state_lte?: String;
  state_gt?: String;
  state_gte?: String;
  state_contains?: String;
  state_not_contains?: String;
  state_starts_with?: String;
  state_not_starts_with?: String;
  state_ends_with?: String;
  state_not_ends_with?: String;
  country?: String;
  country_not?: String;
  country_in?: String[] | String;
  country_not_in?: String[] | String;
  country_lt?: String;
  country_lte?: String;
  country_gt?: String;
  country_gte?: String;
  country_contains?: String;
  country_not_contains?: String;
  country_starts_with?: String;
  country_not_starts_with?: String;
  country_ends_with?: String;
  country_not_ends_with?: String;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  customer?: UserWhereInput;
  AND?: AddressWhereInput[] | AddressWhereInput;
  OR?: AddressWhereInput[] | AddressWhereInput;
  NOT?: AddressWhereInput[] | AddressWhereInput;
}

export interface PaymentCreateWithoutOrderInput {
  paymentId?: String;
  type: String;
  currency?: String;
  creditCard?: CreditCardCreateOneInput;
  customer: UserCreateOneWithoutPaymentsInput;
  merchantOrderId: String;
  customerName?: String;
  tid?: String;
  proofOfSale?: String;
  authorizationCode?: String;
  softDescriptor?: String;
  provider?: String;
  amount?: Int;
  serviceTaxAmount?: Int;
  installments?: Int;
  interest?: Int;
  capture?: Boolean;
  authenticate?: Boolean;
  recurrent?: Boolean;
  receivedDate?: DateTimeInput;
  cupom?: CupomCreateOneInput;
  status?: Int;
  isSplitted?: Boolean;
  returnMessage?: String;
  returnCode?: String;
}

export interface ProductUpdateManyMutationInput {
  price?: Int;
  name?: String;
  stockQuantity?: Int;
  description?: String;
  image?: String;
}

export interface UserCreateOneWithoutPaymentsInput {
  create?: UserCreateWithoutPaymentsInput;
  connect?: UserWhereUniqueInput;
}

export type CupomWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserCreateWithoutPaymentsInput {
  email: String;
  password: String;
  firstName?: String;
  lastName?: String;
  posts?: PostCreateManyWithoutAuthorInput;
  subscribed?: Boolean;
  role?: Role;
  addresses?: AddressCreateManyWithoutCustomerInput;
  orders?: OrderCreateManyWithoutCustomerInput;
  cart: CartCreateOneWithoutCustomerInput;
}

export interface PostUpdateManyMutationInput {
  isPublished?: Boolean;
  title?: String;
  body?: String;
}

export interface AddressUpdateInput {
  type?: AddressType;
  street?: String;
  number?: String;
  complement?: String;
  zip?: String;
  district?: String;
  city?: String;
  state?: String;
  country?: String;
  firstName?: String;
  lastName?: String;
  customer?: UserUpdateOneRequiredWithoutAddressesInput;
}

export interface UserUpdateWithoutPostsDataInput {
  email?: String;
  password?: String;
  firstName?: String;
  lastName?: String;
  subscribed?: Boolean;
  role?: Role;
  addresses?: AddressUpdateManyWithoutCustomerInput;
  orders?: OrderUpdateManyWithoutCustomerInput;
  cart?: CartUpdateOneRequiredWithoutCustomerInput;
  payments?: PaymentUpdateManyWithoutCustomerInput;
}

export interface UserUpdateOneRequiredWithoutAddressesInput {
  create?: UserCreateWithoutAddressesInput;
  update?: UserUpdateWithoutAddressesDataInput;
  upsert?: UserUpsertWithoutAddressesInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateOneRequiredWithoutPostsInput {
  create?: UserCreateWithoutPostsInput;
  update?: UserUpdateWithoutPostsDataInput;
  upsert?: UserUpsertWithoutPostsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutAddressesDataInput {
  email?: String;
  password?: String;
  firstName?: String;
  lastName?: String;
  posts?: PostUpdateManyWithoutAuthorInput;
  subscribed?: Boolean;
  role?: Role;
  orders?: OrderUpdateManyWithoutCustomerInput;
  cart?: CartUpdateOneRequiredWithoutCustomerInput;
  payments?: PaymentUpdateManyWithoutCustomerInput;
}

export interface PostUpdateInput {
  isPublished?: Boolean;
  title?: String;
  body?: String;
  author?: UserUpdateOneRequiredWithoutPostsInput;
}

export interface PostUpdateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput;
  delete?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  set?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  disconnect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  update?:
    | PostUpdateWithWhereUniqueWithoutAuthorInput[]
    | PostUpdateWithWhereUniqueWithoutAuthorInput;
  upsert?:
    | PostUpsertWithWhereUniqueWithoutAuthorInput[]
    | PostUpsertWithWhereUniqueWithoutAuthorInput;
  deleteMany?: PostScalarWhereInput[] | PostScalarWhereInput;
  updateMany?:
    | PostUpdateManyWithWhereNestedInput[]
    | PostUpdateManyWithWhereNestedInput;
}

export interface UserCreateOneWithoutPostsInput {
  create?: UserCreateWithoutPostsInput;
  connect?: UserWhereUniqueInput;
}

export interface PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutAuthorDataInput;
}

export type OrderWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PostUpdateWithoutAuthorDataInput {
  isPublished?: Boolean;
  title?: String;
  body?: String;
}

export interface PaymentUpdateInput {
  paymentId?: String;
  type?: String;
  currency?: String;
  creditCard?: CreditCardUpdateOneInput;
  customer?: UserUpdateOneRequiredWithoutPaymentsInput;
  merchantOrderId?: String;
  customerName?: String;
  order?: OrderUpdateOneRequiredWithoutPaymentInput;
  tid?: String;
  proofOfSale?: String;
  authorizationCode?: String;
  softDescriptor?: String;
  provider?: String;
  amount?: Int;
  serviceTaxAmount?: Int;
  installments?: Int;
  interest?: Int;
  capture?: Boolean;
  authenticate?: Boolean;
  recurrent?: Boolean;
  receivedDate?: DateTimeInput;
  cupom?: CupomUpdateOneInput;
  status?: Int;
  isSplitted?: Boolean;
  returnMessage?: String;
  returnCode?: String;
}

export interface PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutAuthorDataInput;
  create: PostCreateWithoutAuthorInput;
}

export type OrderShippingAddressWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PostScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  isPublished?: Boolean;
  isPublished_not?: Boolean;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  body?: String;
  body_not?: String;
  body_in?: String[] | String;
  body_not_in?: String[] | String;
  body_lt?: String;
  body_lte?: String;
  body_gt?: String;
  body_gte?: String;
  body_contains?: String;
  body_not_contains?: String;
  body_starts_with?: String;
  body_not_starts_with?: String;
  body_ends_with?: String;
  body_not_ends_with?: String;
  AND?: PostScalarWhereInput[] | PostScalarWhereInput;
  OR?: PostScalarWhereInput[] | PostScalarWhereInput;
  NOT?: PostScalarWhereInput[] | PostScalarWhereInput;
}

export interface OrderUpsertWithoutShippingAddressInput {
  update: OrderUpdateWithoutShippingAddressDataInput;
  create: OrderCreateWithoutShippingAddressInput;
}

export interface PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput;
  data: PostUpdateManyDataInput;
}

export interface OrderUpdateOneRequiredWithoutShippingAddressInput {
  create?: OrderCreateWithoutShippingAddressInput;
  update?: OrderUpdateWithoutShippingAddressDataInput;
  upsert?: OrderUpsertWithoutShippingAddressInput;
  connect?: OrderWhereUniqueInput;
}

export interface PostUpdateManyDataInput {
  isPublished?: Boolean;
  title?: String;
  body?: String;
}

export interface OrderShippingAddressUpdateInput {
  street?: String;
  number?: String;
  complement?: String;
  zip?: String;
  district?: String;
  city?: String;
  state?: String;
  country?: String;
  firstName?: String;
  lastName?: String;
  order?: OrderUpdateOneRequiredWithoutShippingAddressInput;
}

export interface OrderUpdateManyWithoutCustomerInput {
  create?: OrderCreateWithoutCustomerInput[] | OrderCreateWithoutCustomerInput;
  delete?: OrderWhereUniqueInput[] | OrderWhereUniqueInput;
  connect?: OrderWhereUniqueInput[] | OrderWhereUniqueInput;
  set?: OrderWhereUniqueInput[] | OrderWhereUniqueInput;
  disconnect?: OrderWhereUniqueInput[] | OrderWhereUniqueInput;
  update?:
    | OrderUpdateWithWhereUniqueWithoutCustomerInput[]
    | OrderUpdateWithWhereUniqueWithoutCustomerInput;
  upsert?:
    | OrderUpsertWithWhereUniqueWithoutCustomerInput[]
    | OrderUpsertWithWhereUniqueWithoutCustomerInput;
  deleteMany?: OrderScalarWhereInput[] | OrderScalarWhereInput;
  updateMany?:
    | OrderUpdateManyWithWhereNestedInput[]
    | OrderUpdateManyWithWhereNestedInput;
}

export interface OrderCreateOneWithoutShippingAddressInput {
  create?: OrderCreateWithoutShippingAddressInput;
  connect?: OrderWhereUniqueInput;
}

export interface OrderUpdateWithWhereUniqueWithoutCustomerInput {
  where: OrderWhereUniqueInput;
  data: OrderUpdateWithoutCustomerDataInput;
}

export interface OrderShippingAddressCreateInput {
  street: String;
  number: String;
  complement?: String;
  zip: String;
  district?: String;
  city?: String;
  state?: String;
  country?: String;
  firstName: String;
  lastName: String;
  order: OrderCreateOneWithoutShippingAddressInput;
}

export interface OrderUpdateWithoutCustomerDataInput {
  recurrying?: Boolean;
  status?: OrderStatus;
  cart?: CartUpdateOneRequiredInput;
  subTotalPrice?: Int;
  totalShippingPrice?: Int;
  totalPrice?: Int;
  processedAt?: DateTimeInput;
  shippingAddress?: OrderShippingAddressUpdateOneRequiredWithoutOrderInput;
  payment?: PaymentUpdateOneWithoutOrderInput;
}

export interface OrderUpdateInput {
  recurrying?: Boolean;
  status?: OrderStatus;
  cart?: CartUpdateOneRequiredInput;
  subTotalPrice?: Int;
  totalShippingPrice?: Int;
  totalPrice?: Int;
  customer?: UserUpdateOneRequiredWithoutOrdersInput;
  processedAt?: DateTimeInput;
  shippingAddress?: OrderShippingAddressUpdateOneRequiredWithoutOrderInput;
  payment?: PaymentUpdateOneWithoutOrderInput;
}

export interface CartUpdateOneRequiredInput {
  create?: CartCreateInput;
  update?: CartUpdateDataInput;
  upsert?: CartUpsertNestedInput;
  connect?: CartWhereUniqueInput;
}

export interface PostWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  isPublished?: Boolean;
  isPublished_not?: Boolean;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  body?: String;
  body_not?: String;
  body_in?: String[] | String;
  body_not_in?: String[] | String;
  body_lt?: String;
  body_lte?: String;
  body_gt?: String;
  body_gte?: String;
  body_contains?: String;
  body_not_contains?: String;
  body_starts_with?: String;
  body_not_starts_with?: String;
  body_ends_with?: String;
  body_not_ends_with?: String;
  author?: UserWhereInput;
  AND?: PostWhereInput[] | PostWhereInput;
  OR?: PostWhereInput[] | PostWhereInput;
  NOT?: PostWhereInput[] | PostWhereInput;
}

export interface CartUpdateDataInput {
  products?: CartItemUpdateManyWithoutCartInput;
  customer?: UserUpdateOneRequiredWithoutCartInput;
}

export interface NewsletterSubscriptionUpdateManyMutationInput {
  email?: String;
}

export interface CartUpdateInput {
  products?: CartItemUpdateManyWithoutCartInput;
  customer?: UserUpdateOneRequiredWithoutCartInput;
}

export type ProductVariantWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
}>;

export interface CartItemUpdateWithWhereUniqueWithoutCartInput {
  where: CartItemWhereUniqueInput;
  data: CartItemUpdateWithoutCartDataInput;
}

export interface CupomUpdateManyMutationInput {
  discount?: Int;
  code?: String;
}

export interface CartItemUpdateWithoutCartDataInput {
  product?: ProductUpdateOneInput;
  quantity?: Int;
  variants?: ProductVariantUpdateManyInput;
}

export interface StoresWhereInput {
  latitude?: Float;
  latitude_not?: Float;
  latitude_in?: Float[] | Float;
  latitude_not_in?: Float[] | Float;
  latitude_lt?: Float;
  latitude_lte?: Float;
  latitude_gt?: Float;
  latitude_gte?: Float;
  longitude?: Float;
  longitude_not?: Float;
  longitude_in?: Float[] | Float;
  longitude_not_in?: Float[] | Float;
  longitude_lt?: Float;
  longitude_lte?: Float;
  longitude_gt?: Float;
  longitude_gte?: Float;
  image?: String;
  image_not?: String;
  image_in?: String[] | String;
  image_not_in?: String[] | String;
  image_lt?: String;
  image_lte?: String;
  image_gt?: String;
  image_gte?: String;
  image_contains?: String;
  image_not_contains?: String;
  image_starts_with?: String;
  image_not_starts_with?: String;
  image_ends_with?: String;
  image_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  address?: String;
  address_not?: String;
  address_in?: String[] | String;
  address_not_in?: String[] | String;
  address_lt?: String;
  address_lte?: String;
  address_gt?: String;
  address_gte?: String;
  address_contains?: String;
  address_not_contains?: String;
  address_starts_with?: String;
  address_not_starts_with?: String;
  address_ends_with?: String;
  address_not_ends_with?: String;
  city?: String;
  city_not?: String;
  city_in?: String[] | String;
  city_not_in?: String[] | String;
  city_lt?: String;
  city_lte?: String;
  city_gt?: String;
  city_gte?: String;
  city_contains?: String;
  city_not_contains?: String;
  city_starts_with?: String;
  city_not_starts_with?: String;
  city_ends_with?: String;
  city_not_ends_with?: String;
  zip?: String;
  zip_not?: String;
  zip_in?: String[] | String;
  zip_not_in?: String[] | String;
  zip_lt?: String;
  zip_lte?: String;
  zip_gt?: String;
  zip_gte?: String;
  zip_contains?: String;
  zip_not_contains?: String;
  zip_starts_with?: String;
  zip_not_starts_with?: String;
  zip_ends_with?: String;
  zip_not_ends_with?: String;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: StoresWhereInput[] | StoresWhereInput;
  OR?: StoresWhereInput[] | StoresWhereInput;
  NOT?: StoresWhereInput[] | StoresWhereInput;
}

export interface ProductUpdateOneInput {
  create?: ProductCreateInput;
  update?: ProductUpdateDataInput;
  upsert?: ProductUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ProductWhereUniqueInput;
}

export interface CreditCardUpdateInput {
  cardNumber?: String;
  holder?: String;
  expirationDate?: String;
  saveCard?: Boolean;
  brand?: String;
}

export interface ProductUpdateDataInput {
  price?: Int;
  name?: String;
  stockQuantity?: Int;
  variants?: ProductVariantUpdateManyWithoutProductInput;
  description?: String;
  image?: String;
}

export interface CartUpsertWithoutProductsInput {
  update: CartUpdateWithoutProductsDataInput;
  create: CartCreateWithoutProductsInput;
}

export interface ProductVariantUpdateManyWithoutProductInput {
  create?:
    | ProductVariantCreateWithoutProductInput[]
    | ProductVariantCreateWithoutProductInput;
  delete?: ProductVariantWhereUniqueInput[] | ProductVariantWhereUniqueInput;
  connect?: ProductVariantWhereUniqueInput[] | ProductVariantWhereUniqueInput;
  set?: ProductVariantWhereUniqueInput[] | ProductVariantWhereUniqueInput;
  disconnect?:
    | ProductVariantWhereUniqueInput[]
    | ProductVariantWhereUniqueInput;
  update?:
    | ProductVariantUpdateWithWhereUniqueWithoutProductInput[]
    | ProductVariantUpdateWithWhereUniqueWithoutProductInput;
  upsert?:
    | ProductVariantUpsertWithWhereUniqueWithoutProductInput[]
    | ProductVariantUpsertWithWhereUniqueWithoutProductInput;
  deleteMany?:
    | ProductVariantScalarWhereInput[]
    | ProductVariantScalarWhereInput;
  updateMany?:
    | ProductVariantUpdateManyWithWhereNestedInput[]
    | ProductVariantUpdateManyWithWhereNestedInput;
}

export interface CartUpdateOneRequiredWithoutProductsInput {
  create?: CartCreateWithoutProductsInput;
  update?: CartUpdateWithoutProductsDataInput;
  upsert?: CartUpsertWithoutProductsInput;
  connect?: CartWhereUniqueInput;
}

export interface ProductVariantUpdateWithWhereUniqueWithoutProductInput {
  where: ProductVariantWhereUniqueInput;
  data: ProductVariantUpdateWithoutProductDataInput;
}

export interface CartItemUpdateInput {
  cart?: CartUpdateOneRequiredWithoutProductsInput;
  product?: ProductUpdateOneInput;
  quantity?: Int;
  variants?: ProductVariantUpdateManyInput;
}

export interface ProductVariantUpdateWithoutProductDataInput {
  name?: String;
  information?: String;
  image?: String;
}

export interface CartCreateOneWithoutProductsInput {
  create?: CartCreateWithoutProductsInput;
  connect?: CartWhereUniqueInput;
}

export interface ProductVariantUpsertWithWhereUniqueWithoutProductInput {
  where: ProductVariantWhereUniqueInput;
  update: ProductVariantUpdateWithoutProductDataInput;
  create: ProductVariantCreateWithoutProductInput;
}

export interface UserCreateOneWithoutAddressesInput {
  create?: UserCreateWithoutAddressesInput;
  connect?: UserWhereUniqueInput;
}

export interface ProductVariantScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  information?: String;
  information_not?: String;
  information_in?: String[] | String;
  information_not_in?: String[] | String;
  information_lt?: String;
  information_lte?: String;
  information_gt?: String;
  information_gte?: String;
  information_contains?: String;
  information_not_contains?: String;
  information_starts_with?: String;
  information_not_starts_with?: String;
  information_ends_with?: String;
  information_not_ends_with?: String;
  image?: String;
  image_not?: String;
  image_in?: String[] | String;
  image_not_in?: String[] | String;
  image_lt?: String;
  image_lte?: String;
  image_gt?: String;
  image_gte?: String;
  image_contains?: String;
  image_not_contains?: String;
  image_starts_with?: String;
  image_not_starts_with?: String;
  image_ends_with?: String;
  image_not_ends_with?: String;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  AND?: ProductVariantScalarWhereInput[] | ProductVariantScalarWhereInput;
  OR?: ProductVariantScalarWhereInput[] | ProductVariantScalarWhereInput;
  NOT?: ProductVariantScalarWhereInput[] | ProductVariantScalarWhereInput;
}

export interface PostCreateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
}

export interface CreditCardWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  cardNumber?: String;
  cardNumber_not?: String;
  cardNumber_in?: String[] | String;
  cardNumber_not_in?: String[] | String;
  cardNumber_lt?: String;
  cardNumber_lte?: String;
  cardNumber_gt?: String;
  cardNumber_gte?: String;
  cardNumber_contains?: String;
  cardNumber_not_contains?: String;
  cardNumber_starts_with?: String;
  cardNumber_not_starts_with?: String;
  cardNumber_ends_with?: String;
  cardNumber_not_ends_with?: String;
  holder?: String;
  holder_not?: String;
  holder_in?: String[] | String;
  holder_not_in?: String[] | String;
  holder_lt?: String;
  holder_lte?: String;
  holder_gt?: String;
  holder_gte?: String;
  holder_contains?: String;
  holder_not_contains?: String;
  holder_starts_with?: String;
  holder_not_starts_with?: String;
  holder_ends_with?: String;
  holder_not_ends_with?: String;
  expirationDate?: String;
  expirationDate_not?: String;
  expirationDate_in?: String[] | String;
  expirationDate_not_in?: String[] | String;
  expirationDate_lt?: String;
  expirationDate_lte?: String;
  expirationDate_gt?: String;
  expirationDate_gte?: String;
  expirationDate_contains?: String;
  expirationDate_not_contains?: String;
  expirationDate_starts_with?: String;
  expirationDate_not_starts_with?: String;
  expirationDate_ends_with?: String;
  expirationDate_not_ends_with?: String;
  saveCard?: Boolean;
  saveCard_not?: Boolean;
  brand?: String;
  brand_not?: String;
  brand_in?: String[] | String;
  brand_not_in?: String[] | String;
  brand_lt?: String;
  brand_lte?: String;
  brand_gt?: String;
  brand_gte?: String;
  brand_contains?: String;
  brand_not_contains?: String;
  brand_starts_with?: String;
  brand_not_starts_with?: String;
  brand_ends_with?: String;
  brand_not_ends_with?: String;
  AND?: CreditCardWhereInput[] | CreditCardWhereInput;
  OR?: CreditCardWhereInput[] | CreditCardWhereInput;
  NOT?: CreditCardWhereInput[] | CreditCardWhereInput;
}

export interface OrderCreateManyWithoutCustomerInput {
  create?: OrderCreateWithoutCustomerInput[] | OrderCreateWithoutCustomerInput;
  connect?: OrderWhereUniqueInput[] | OrderWhereUniqueInput;
}

export interface OrderShippingAddressWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  street?: String;
  street_not?: String;
  street_in?: String[] | String;
  street_not_in?: String[] | String;
  street_lt?: String;
  street_lte?: String;
  street_gt?: String;
  street_gte?: String;
  street_contains?: String;
  street_not_contains?: String;
  street_starts_with?: String;
  street_not_starts_with?: String;
  street_ends_with?: String;
  street_not_ends_with?: String;
  number?: String;
  number_not?: String;
  number_in?: String[] | String;
  number_not_in?: String[] | String;
  number_lt?: String;
  number_lte?: String;
  number_gt?: String;
  number_gte?: String;
  number_contains?: String;
  number_not_contains?: String;
  number_starts_with?: String;
  number_not_starts_with?: String;
  number_ends_with?: String;
  number_not_ends_with?: String;
  complement?: String;
  complement_not?: String;
  complement_in?: String[] | String;
  complement_not_in?: String[] | String;
  complement_lt?: String;
  complement_lte?: String;
  complement_gt?: String;
  complement_gte?: String;
  complement_contains?: String;
  complement_not_contains?: String;
  complement_starts_with?: String;
  complement_not_starts_with?: String;
  complement_ends_with?: String;
  complement_not_ends_with?: String;
  zip?: String;
  zip_not?: String;
  zip_in?: String[] | String;
  zip_not_in?: String[] | String;
  zip_lt?: String;
  zip_lte?: String;
  zip_gt?: String;
  zip_gte?: String;
  zip_contains?: String;
  zip_not_contains?: String;
  zip_starts_with?: String;
  zip_not_starts_with?: String;
  zip_ends_with?: String;
  zip_not_ends_with?: String;
  district?: String;
  district_not?: String;
  district_in?: String[] | String;
  district_not_in?: String[] | String;
  district_lt?: String;
  district_lte?: String;
  district_gt?: String;
  district_gte?: String;
  district_contains?: String;
  district_not_contains?: String;
  district_starts_with?: String;
  district_not_starts_with?: String;
  district_ends_with?: String;
  district_not_ends_with?: String;
  city?: String;
  city_not?: String;
  city_in?: String[] | String;
  city_not_in?: String[] | String;
  city_lt?: String;
  city_lte?: String;
  city_gt?: String;
  city_gte?: String;
  city_contains?: String;
  city_not_contains?: String;
  city_starts_with?: String;
  city_not_starts_with?: String;
  city_ends_with?: String;
  city_not_ends_with?: String;
  state?: String;
  state_not?: String;
  state_in?: String[] | String;
  state_not_in?: String[] | String;
  state_lt?: String;
  state_lte?: String;
  state_gt?: String;
  state_gte?: String;
  state_contains?: String;
  state_not_contains?: String;
  state_starts_with?: String;
  state_not_starts_with?: String;
  state_ends_with?: String;
  state_not_ends_with?: String;
  country?: String;
  country_not?: String;
  country_in?: String[] | String;
  country_not_in?: String[] | String;
  country_lt?: String;
  country_lte?: String;
  country_gt?: String;
  country_gte?: String;
  country_contains?: String;
  country_not_contains?: String;
  country_starts_with?: String;
  country_not_starts_with?: String;
  country_ends_with?: String;
  country_not_ends_with?: String;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  order?: OrderWhereInput;
  AND?: OrderShippingAddressWhereInput[] | OrderShippingAddressWhereInput;
  OR?: OrderShippingAddressWhereInput[] | OrderShippingAddressWhereInput;
  NOT?: OrderShippingAddressWhereInput[] | OrderShippingAddressWhereInput;
}

export interface CartCreateOneInput {
  create?: CartCreateInput;
  connect?: CartWhereUniqueInput;
}

export interface ProductVariantWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  information?: String;
  information_not?: String;
  information_in?: String[] | String;
  information_not_in?: String[] | String;
  information_lt?: String;
  information_lte?: String;
  information_gt?: String;
  information_gte?: String;
  information_contains?: String;
  information_not_contains?: String;
  information_starts_with?: String;
  information_not_starts_with?: String;
  information_ends_with?: String;
  information_not_ends_with?: String;
  image?: String;
  image_not?: String;
  image_in?: String[] | String;
  image_not_in?: String[] | String;
  image_lt?: String;
  image_lte?: String;
  image_gt?: String;
  image_gte?: String;
  image_contains?: String;
  image_not_contains?: String;
  image_starts_with?: String;
  image_not_starts_with?: String;
  image_ends_with?: String;
  image_not_ends_with?: String;
  product?: ProductWhereInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  AND?: ProductVariantWhereInput[] | ProductVariantWhereInput;
  OR?: ProductVariantWhereInput[] | ProductVariantWhereInput;
  NOT?: ProductVariantWhereInput[] | ProductVariantWhereInput;
}

export interface CartItemCreateManyWithoutCartInput {
  create?: CartItemCreateWithoutCartInput[] | CartItemCreateWithoutCartInput;
  connect?: CartItemWhereUniqueInput[] | CartItemWhereUniqueInput;
}

export interface ProductVariantUpdateManyInput {
  create?: ProductVariantCreateInput[] | ProductVariantCreateInput;
  update?:
    | ProductVariantUpdateWithWhereUniqueNestedInput[]
    | ProductVariantUpdateWithWhereUniqueNestedInput;
  upsert?:
    | ProductVariantUpsertWithWhereUniqueNestedInput[]
    | ProductVariantUpsertWithWhereUniqueNestedInput;
  delete?: ProductVariantWhereUniqueInput[] | ProductVariantWhereUniqueInput;
  connect?: ProductVariantWhereUniqueInput[] | ProductVariantWhereUniqueInput;
  set?: ProductVariantWhereUniqueInput[] | ProductVariantWhereUniqueInput;
  disconnect?:
    | ProductVariantWhereUniqueInput[]
    | ProductVariantWhereUniqueInput;
  deleteMany?:
    | ProductVariantScalarWhereInput[]
    | ProductVariantScalarWhereInput;
  updateMany?:
    | ProductVariantUpdateManyWithWhereNestedInput[]
    | ProductVariantUpdateManyWithWhereNestedInput;
}

export interface ProductCreateOneInput {
  create?: ProductCreateInput;
  connect?: ProductWhereUniqueInput;
}

export interface ProductVariantUpdateWithWhereUniqueNestedInput {
  where: ProductVariantWhereUniqueInput;
  data: ProductVariantUpdateDataInput;
}

export interface ProductVariantCreateManyWithoutProductInput {
  create?:
    | ProductVariantCreateWithoutProductInput[]
    | ProductVariantCreateWithoutProductInput;
  connect?: ProductVariantWhereUniqueInput[] | ProductVariantWhereUniqueInput;
}

export interface ProductVariantUpdateDataInput {
  name?: String;
  information?: String;
  image?: String;
  product?: ProductUpdateOneRequiredWithoutVariantsInput;
}

export interface ProductVariantCreateManyInput {
  create?: ProductVariantCreateInput[] | ProductVariantCreateInput;
  connect?: ProductVariantWhereUniqueInput[] | ProductVariantWhereUniqueInput;
}

export interface ProductUpdateOneRequiredWithoutVariantsInput {
  create?: ProductCreateWithoutVariantsInput;
  update?: ProductUpdateWithoutVariantsDataInput;
  upsert?: ProductUpsertWithoutVariantsInput;
  connect?: ProductWhereUniqueInput;
}

export interface ProductCreateOneWithoutVariantsInput {
  create?: ProductCreateWithoutVariantsInput;
  connect?: ProductWhereUniqueInput;
}

export interface ProductUpdateWithoutVariantsDataInput {
  price?: Int;
  name?: String;
  stockQuantity?: Int;
  description?: String;
  image?: String;
}

export interface UserCreateOneWithoutCartInput {
  create?: UserCreateWithoutCartInput;
  connect?: UserWhereUniqueInput;
}

export interface ProductUpsertWithoutVariantsInput {
  update: ProductUpdateWithoutVariantsDataInput;
  create: ProductCreateWithoutVariantsInput;
}

export interface AddressCreateManyWithoutCustomerInput {
  create?:
    | AddressCreateWithoutCustomerInput[]
    | AddressCreateWithoutCustomerInput;
  connect?: AddressWhereUniqueInput[] | AddressWhereUniqueInput;
}

export interface ProductVariantUpsertWithWhereUniqueNestedInput {
  where: ProductVariantWhereUniqueInput;
  update: ProductVariantUpdateDataInput;
  create: ProductVariantCreateInput;
}

export interface ProductVariantSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ProductVariantWhereInput;
  AND?:
    | ProductVariantSubscriptionWhereInput[]
    | ProductVariantSubscriptionWhereInput;
  OR?:
    | ProductVariantSubscriptionWhereInput[]
    | ProductVariantSubscriptionWhereInput;
  NOT?:
    | ProductVariantSubscriptionWhereInput[]
    | ProductVariantSubscriptionWhereInput;
}

export interface CartItemUpsertWithWhereUniqueWithoutCartInput {
  where: CartItemWhereUniqueInput;
  update: CartItemUpdateWithoutCartDataInput;
  create: CartItemCreateWithoutCartInput;
}

export interface CartItemWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  cart?: CartWhereInput;
  product?: ProductWhereInput;
  quantity?: Int;
  quantity_not?: Int;
  quantity_in?: Int[] | Int;
  quantity_not_in?: Int[] | Int;
  quantity_lt?: Int;
  quantity_lte?: Int;
  quantity_gt?: Int;
  quantity_gte?: Int;
  variants_every?: ProductVariantWhereInput;
  variants_some?: ProductVariantWhereInput;
  variants_none?: ProductVariantWhereInput;
  AND?: CartItemWhereInput[] | CartItemWhereInput;
  OR?: CartItemWhereInput[] | CartItemWhereInput;
  NOT?: CartItemWhereInput[] | CartItemWhereInput;
}

export interface CartItemScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  quantity?: Int;
  quantity_not?: Int;
  quantity_in?: Int[] | Int;
  quantity_not_in?: Int[] | Int;
  quantity_lt?: Int;
  quantity_lte?: Int;
  quantity_gt?: Int;
  quantity_gte?: Int;
  AND?: CartItemScalarWhereInput[] | CartItemScalarWhereInput;
  OR?: CartItemScalarWhereInput[] | CartItemScalarWhereInput;
  NOT?: CartItemScalarWhereInput[] | CartItemScalarWhereInput;
}

export interface NewsletterSubscriptionSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: NewsletterSubscriptionWhereInput;
  AND?:
    | NewsletterSubscriptionSubscriptionWhereInput[]
    | NewsletterSubscriptionSubscriptionWhereInput;
  OR?:
    | NewsletterSubscriptionSubscriptionWhereInput[]
    | NewsletterSubscriptionSubscriptionWhereInput;
  NOT?:
    | NewsletterSubscriptionSubscriptionWhereInput[]
    | NewsletterSubscriptionSubscriptionWhereInput;
}

export interface CartItemUpdateManyWithWhereNestedInput {
  where: CartItemScalarWhereInput;
  data: CartItemUpdateManyDataInput;
}

export interface CartItemSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CartItemWhereInput;
  AND?: CartItemSubscriptionWhereInput[] | CartItemSubscriptionWhereInput;
  OR?: CartItemSubscriptionWhereInput[] | CartItemSubscriptionWhereInput;
  NOT?: CartItemSubscriptionWhereInput[] | CartItemSubscriptionWhereInput;
}

export interface CartItemUpdateManyDataInput {
  quantity?: Int;
}

export interface OrderWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  recurrying?: Boolean;
  recurrying_not?: Boolean;
  status?: OrderStatus;
  status_not?: OrderStatus;
  status_in?: OrderStatus[] | OrderStatus;
  status_not_in?: OrderStatus[] | OrderStatus;
  cart?: CartWhereInput;
  subTotalPrice?: Int;
  subTotalPrice_not?: Int;
  subTotalPrice_in?: Int[] | Int;
  subTotalPrice_not_in?: Int[] | Int;
  subTotalPrice_lt?: Int;
  subTotalPrice_lte?: Int;
  subTotalPrice_gt?: Int;
  subTotalPrice_gte?: Int;
  totalShippingPrice?: Int;
  totalShippingPrice_not?: Int;
  totalShippingPrice_in?: Int[] | Int;
  totalShippingPrice_not_in?: Int[] | Int;
  totalShippingPrice_lt?: Int;
  totalShippingPrice_lte?: Int;
  totalShippingPrice_gt?: Int;
  totalShippingPrice_gte?: Int;
  totalPrice?: Int;
  totalPrice_not?: Int;
  totalPrice_in?: Int[] | Int;
  totalPrice_not_in?: Int[] | Int;
  totalPrice_lt?: Int;
  totalPrice_lte?: Int;
  totalPrice_gt?: Int;
  totalPrice_gte?: Int;
  customer?: UserWhereInput;
  processedAt?: DateTimeInput;
  processedAt_not?: DateTimeInput;
  processedAt_in?: DateTimeInput[] | DateTimeInput;
  processedAt_not_in?: DateTimeInput[] | DateTimeInput;
  processedAt_lt?: DateTimeInput;
  processedAt_lte?: DateTimeInput;
  processedAt_gt?: DateTimeInput;
  processedAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  shippingAddress?: OrderShippingAddressWhereInput;
  payment?: PaymentWhereInput;
  AND?: OrderWhereInput[] | OrderWhereInput;
  OR?: OrderWhereInput[] | OrderWhereInput;
  NOT?: OrderWhereInput[] | OrderWhereInput;
}

export interface UserUpdateOneRequiredWithoutCartInput {
  create?: UserCreateWithoutCartInput;
  update?: UserUpdateWithoutCartDataInput;
  upsert?: UserUpsertWithoutCartInput;
  connect?: UserWhereUniqueInput;
}

export type CartItemWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserUpdateWithoutCartDataInput {
  email?: String;
  password?: String;
  firstName?: String;
  lastName?: String;
  posts?: PostUpdateManyWithoutAuthorInput;
  subscribed?: Boolean;
  role?: Role;
  addresses?: AddressUpdateManyWithoutCustomerInput;
  orders?: OrderUpdateManyWithoutCustomerInput;
  payments?: PaymentUpdateManyWithoutCustomerInput;
}

export type CreditCardWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface AddressUpdateManyWithoutCustomerInput {
  create?:
    | AddressCreateWithoutCustomerInput[]
    | AddressCreateWithoutCustomerInput;
  delete?: AddressWhereUniqueInput[] | AddressWhereUniqueInput;
  connect?: AddressWhereUniqueInput[] | AddressWhereUniqueInput;
  set?: AddressWhereUniqueInput[] | AddressWhereUniqueInput;
  disconnect?: AddressWhereUniqueInput[] | AddressWhereUniqueInput;
  update?:
    | AddressUpdateWithWhereUniqueWithoutCustomerInput[]
    | AddressUpdateWithWhereUniqueWithoutCustomerInput;
  upsert?:
    | AddressUpsertWithWhereUniqueWithoutCustomerInput[]
    | AddressUpsertWithWhereUniqueWithoutCustomerInput;
  deleteMany?: AddressScalarWhereInput[] | AddressScalarWhereInput;
  updateMany?:
    | AddressUpdateManyWithWhereNestedInput[]
    | AddressUpdateManyWithWhereNestedInput;
}

export interface ProductUpdateInput {
  price?: Int;
  name?: String;
  stockQuantity?: Int;
  variants?: ProductVariantUpdateManyWithoutProductInput;
  description?: String;
  image?: String;
}

export interface AddressUpdateWithWhereUniqueWithoutCustomerInput {
  where: AddressWhereUniqueInput;
  data: AddressUpdateWithoutCustomerDataInput;
}

export interface UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput;
  create: UserCreateWithoutPostsInput;
}

export interface AddressUpdateWithoutCustomerDataInput {
  type?: AddressType;
  street?: String;
  number?: String;
  complement?: String;
  zip?: String;
  district?: String;
  city?: String;
  state?: String;
  country?: String;
  firstName?: String;
  lastName?: String;
}

export interface NewsletterSubscriptionWhereInput {
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  AND?: NewsletterSubscriptionWhereInput[] | NewsletterSubscriptionWhereInput;
  OR?: NewsletterSubscriptionWhereInput[] | NewsletterSubscriptionWhereInput;
  NOT?: NewsletterSubscriptionWhereInput[] | NewsletterSubscriptionWhereInput;
}

export interface AddressUpsertWithWhereUniqueWithoutCustomerInput {
  where: AddressWhereUniqueInput;
  update: AddressUpdateWithoutCustomerDataInput;
  create: AddressCreateWithoutCustomerInput;
}

export interface PostCreateInput {
  isPublished?: Boolean;
  title: String;
  body: String;
  author: UserCreateOneWithoutPostsInput;
}

export interface AddressScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  type?: AddressType;
  type_not?: AddressType;
  type_in?: AddressType[] | AddressType;
  type_not_in?: AddressType[] | AddressType;
  street?: String;
  street_not?: String;
  street_in?: String[] | String;
  street_not_in?: String[] | String;
  street_lt?: String;
  street_lte?: String;
  street_gt?: String;
  street_gte?: String;
  street_contains?: String;
  street_not_contains?: String;
  street_starts_with?: String;
  street_not_starts_with?: String;
  street_ends_with?: String;
  street_not_ends_with?: String;
  number?: String;
  number_not?: String;
  number_in?: String[] | String;
  number_not_in?: String[] | String;
  number_lt?: String;
  number_lte?: String;
  number_gt?: String;
  number_gte?: String;
  number_contains?: String;
  number_not_contains?: String;
  number_starts_with?: String;
  number_not_starts_with?: String;
  number_ends_with?: String;
  number_not_ends_with?: String;
  complement?: String;
  complement_not?: String;
  complement_in?: String[] | String;
  complement_not_in?: String[] | String;
  complement_lt?: String;
  complement_lte?: String;
  complement_gt?: String;
  complement_gte?: String;
  complement_contains?: String;
  complement_not_contains?: String;
  complement_starts_with?: String;
  complement_not_starts_with?: String;
  complement_ends_with?: String;
  complement_not_ends_with?: String;
  zip?: String;
  zip_not?: String;
  zip_in?: String[] | String;
  zip_not_in?: String[] | String;
  zip_lt?: String;
  zip_lte?: String;
  zip_gt?: String;
  zip_gte?: String;
  zip_contains?: String;
  zip_not_contains?: String;
  zip_starts_with?: String;
  zip_not_starts_with?: String;
  zip_ends_with?: String;
  zip_not_ends_with?: String;
  district?: String;
  district_not?: String;
  district_in?: String[] | String;
  district_not_in?: String[] | String;
  district_lt?: String;
  district_lte?: String;
  district_gt?: String;
  district_gte?: String;
  district_contains?: String;
  district_not_contains?: String;
  district_starts_with?: String;
  district_not_starts_with?: String;
  district_ends_with?: String;
  district_not_ends_with?: String;
  city?: String;
  city_not?: String;
  city_in?: String[] | String;
  city_not_in?: String[] | String;
  city_lt?: String;
  city_lte?: String;
  city_gt?: String;
  city_gte?: String;
  city_contains?: String;
  city_not_contains?: String;
  city_starts_with?: String;
  city_not_starts_with?: String;
  city_ends_with?: String;
  city_not_ends_with?: String;
  state?: String;
  state_not?: String;
  state_in?: String[] | String;
  state_not_in?: String[] | String;
  state_lt?: String;
  state_lte?: String;
  state_gt?: String;
  state_gte?: String;
  state_contains?: String;
  state_not_contains?: String;
  state_starts_with?: String;
  state_not_starts_with?: String;
  state_ends_with?: String;
  state_not_ends_with?: String;
  country?: String;
  country_not?: String;
  country_in?: String[] | String;
  country_not_in?: String[] | String;
  country_lt?: String;
  country_lte?: String;
  country_gt?: String;
  country_gte?: String;
  country_contains?: String;
  country_not_contains?: String;
  country_starts_with?: String;
  country_not_starts_with?: String;
  country_ends_with?: String;
  country_not_ends_with?: String;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  AND?: AddressScalarWhereInput[] | AddressScalarWhereInput;
  OR?: AddressScalarWhereInput[] | AddressScalarWhereInput;
  NOT?: AddressScalarWhereInput[] | AddressScalarWhereInput;
}

export interface PaymentCreateInput {
  paymentId?: String;
  type: String;
  currency?: String;
  creditCard?: CreditCardCreateOneInput;
  customer: UserCreateOneWithoutPaymentsInput;
  merchantOrderId: String;
  customerName?: String;
  order: OrderCreateOneWithoutPaymentInput;
  tid?: String;
  proofOfSale?: String;
  authorizationCode?: String;
  softDescriptor?: String;
  provider?: String;
  amount?: Int;
  serviceTaxAmount?: Int;
  installments?: Int;
  interest?: Int;
  capture?: Boolean;
  authenticate?: Boolean;
  recurrent?: Boolean;
  receivedDate?: DateTimeInput;
  cupom?: CupomCreateOneInput;
  status?: Int;
  isSplitted?: Boolean;
  returnMessage?: String;
  returnCode?: String;
}

export interface AddressUpdateManyWithWhereNestedInput {
  where: AddressScalarWhereInput;
  data: AddressUpdateManyDataInput;
}

export interface OrderUpdateWithoutShippingAddressDataInput {
  recurrying?: Boolean;
  status?: OrderStatus;
  cart?: CartUpdateOneRequiredInput;
  subTotalPrice?: Int;
  totalShippingPrice?: Int;
  totalPrice?: Int;
  customer?: UserUpdateOneRequiredWithoutOrdersInput;
  processedAt?: DateTimeInput;
  payment?: PaymentUpdateOneWithoutOrderInput;
}

export interface AddressUpdateManyDataInput {
  type?: AddressType;
  street?: String;
  number?: String;
  complement?: String;
  zip?: String;
  district?: String;
  city?: String;
  state?: String;
  country?: String;
  firstName?: String;
  lastName?: String;
}

export interface OrderCreateWithoutShippingAddressInput {
  recurrying?: Boolean;
  status?: OrderStatus;
  cart: CartCreateOneInput;
  subTotalPrice: Int;
  totalShippingPrice?: Int;
  totalPrice: Int;
  customer: UserCreateOneWithoutOrdersInput;
  processedAt?: DateTimeInput;
  payment?: PaymentCreateOneWithoutOrderInput;
}

export interface PaymentUpdateManyWithoutCustomerInput {
  create?:
    | PaymentCreateWithoutCustomerInput[]
    | PaymentCreateWithoutCustomerInput;
  delete?: PaymentWhereUniqueInput[] | PaymentWhereUniqueInput;
  connect?: PaymentWhereUniqueInput[] | PaymentWhereUniqueInput;
  set?: PaymentWhereUniqueInput[] | PaymentWhereUniqueInput;
  disconnect?: PaymentWhereUniqueInput[] | PaymentWhereUniqueInput;
  update?:
    | PaymentUpdateWithWhereUniqueWithoutCustomerInput[]
    | PaymentUpdateWithWhereUniqueWithoutCustomerInput;
  upsert?:
    | PaymentUpsertWithWhereUniqueWithoutCustomerInput[]
    | PaymentUpsertWithWhereUniqueWithoutCustomerInput;
  deleteMany?: PaymentScalarWhereInput[] | PaymentScalarWhereInput;
  updateMany?:
    | PaymentUpdateManyWithWhereNestedInput[]
    | PaymentUpdateManyWithWhereNestedInput;
}

export interface OrderUpdateManyMutationInput {
  recurrying?: Boolean;
  status?: OrderStatus;
  subTotalPrice?: Int;
  totalShippingPrice?: Int;
  totalPrice?: Int;
  processedAt?: DateTimeInput;
}

export interface PaymentUpdateWithWhereUniqueWithoutCustomerInput {
  where: PaymentWhereUniqueInput;
  data: PaymentUpdateWithoutCustomerDataInput;
}

export interface OrderCreateInput {
  recurrying?: Boolean;
  status?: OrderStatus;
  cart: CartCreateOneInput;
  subTotalPrice: Int;
  totalShippingPrice?: Int;
  totalPrice: Int;
  customer: UserCreateOneWithoutOrdersInput;
  processedAt?: DateTimeInput;
  shippingAddress: OrderShippingAddressCreateOneWithoutOrderInput;
  payment?: PaymentCreateOneWithoutOrderInput;
}

export interface PaymentUpdateWithoutCustomerDataInput {
  paymentId?: String;
  type?: String;
  currency?: String;
  creditCard?: CreditCardUpdateOneInput;
  merchantOrderId?: String;
  customerName?: String;
  order?: OrderUpdateOneRequiredWithoutPaymentInput;
  tid?: String;
  proofOfSale?: String;
  authorizationCode?: String;
  softDescriptor?: String;
  provider?: String;
  amount?: Int;
  serviceTaxAmount?: Int;
  installments?: Int;
  interest?: Int;
  capture?: Boolean;
  authenticate?: Boolean;
  recurrent?: Boolean;
  receivedDate?: DateTimeInput;
  cupom?: CupomUpdateOneInput;
  status?: Int;
  isSplitted?: Boolean;
  returnMessage?: String;
  returnCode?: String;
}

export interface NewsletterSubscriptionCreateInput {
  email: String;
}

export interface CreditCardUpdateOneInput {
  create?: CreditCardCreateInput;
  update?: CreditCardUpdateDataInput;
  upsert?: CreditCardUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CreditCardWhereUniqueInput;
}

export interface CreditCardUpdateManyMutationInput {
  cardNumber?: String;
  holder?: String;
  expirationDate?: String;
  saveCard?: Boolean;
  brand?: String;
}

export interface CreditCardUpdateDataInput {
  cardNumber?: String;
  holder?: String;
  expirationDate?: String;
  saveCard?: Boolean;
  brand?: String;
}

export interface CartUpdateWithoutProductsDataInput {
  customer?: UserUpdateOneRequiredWithoutCartInput;
}

export interface CreditCardUpsertNestedInput {
  update: CreditCardUpdateDataInput;
  create: CreditCardCreateInput;
}

export interface CartCreateWithoutProductsInput {
  customer: UserCreateOneWithoutCartInput;
}

export interface OrderUpdateOneRequiredWithoutPaymentInput {
  create?: OrderCreateWithoutPaymentInput;
  update?: OrderUpdateWithoutPaymentDataInput;
  upsert?: OrderUpsertWithoutPaymentInput;
  connect?: OrderWhereUniqueInput;
}

export interface AddressCreateInput {
  type?: AddressType;
  street: String;
  number: String;
  complement?: String;
  zip: String;
  district?: String;
  city?: String;
  state?: String;
  country?: String;
  firstName: String;
  lastName: String;
  customer: UserCreateOneWithoutAddressesInput;
}

export interface OrderUpdateWithoutPaymentDataInput {
  recurrying?: Boolean;
  status?: OrderStatus;
  cart?: CartUpdateOneRequiredInput;
  subTotalPrice?: Int;
  totalShippingPrice?: Int;
  totalPrice?: Int;
  customer?: UserUpdateOneRequiredWithoutOrdersInput;
  processedAt?: DateTimeInput;
  shippingAddress?: OrderShippingAddressUpdateOneRequiredWithoutOrderInput;
}

export interface PostCreateWithoutAuthorInput {
  isPublished?: Boolean;
  title: String;
  body: String;
}

export interface UserUpdateOneRequiredWithoutOrdersInput {
  create?: UserCreateWithoutOrdersInput;
  update?: UserUpdateWithoutOrdersDataInput;
  upsert?: UserUpsertWithoutOrdersInput;
  connect?: UserWhereUniqueInput;
}

export interface CartCreateInput {
  products?: CartItemCreateManyWithoutCartInput;
  customer: UserCreateOneWithoutCartInput;
}

export interface UserUpdateWithoutOrdersDataInput {
  email?: String;
  password?: String;
  firstName?: String;
  lastName?: String;
  posts?: PostUpdateManyWithoutAuthorInput;
  subscribed?: Boolean;
  role?: Role;
  addresses?: AddressUpdateManyWithoutCustomerInput;
  cart?: CartUpdateOneRequiredWithoutCustomerInput;
  payments?: PaymentUpdateManyWithoutCustomerInput;
}

export interface ProductCreateInput {
  price: Int;
  name: String;
  stockQuantity?: Int;
  variants?: ProductVariantCreateManyWithoutProductInput;
  description?: String;
  image?: String;
}

export interface CartUpdateOneRequiredWithoutCustomerInput {
  create?: CartCreateWithoutCustomerInput;
  update?: CartUpdateWithoutCustomerDataInput;
  upsert?: CartUpsertWithoutCustomerInput;
  connect?: CartWhereUniqueInput;
}

export interface ProductVariantCreateInput {
  name: String;
  information?: String;
  image?: String;
  product: ProductCreateOneWithoutVariantsInput;
}

export interface CartUpdateWithoutCustomerDataInput {
  products?: CartItemUpdateManyWithoutCartInput;
}

export interface UserCreateWithoutCartInput {
  email: String;
  password: String;
  firstName?: String;
  lastName?: String;
  posts?: PostCreateManyWithoutAuthorInput;
  subscribed?: Boolean;
  role?: Role;
  addresses?: AddressCreateManyWithoutCustomerInput;
  orders?: OrderCreateManyWithoutCustomerInput;
  payments?: PaymentCreateManyWithoutCustomerInput;
}

export interface CartUpsertWithoutCustomerInput {
  update: CartUpdateWithoutCustomerDataInput;
  create: CartCreateWithoutCustomerInput;
}

export interface ProductSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ProductWhereInput;
  AND?: ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput;
  OR?: ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput;
  NOT?: ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput;
}

export interface UserUpsertWithoutOrdersInput {
  update: UserUpdateWithoutOrdersDataInput;
  create: UserCreateWithoutOrdersInput;
}

export interface CartWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  products_every?: CartItemWhereInput;
  products_some?: CartItemWhereInput;
  products_none?: CartItemWhereInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  customer?: UserWhereInput;
  AND?: CartWhereInput[] | CartWhereInput;
  OR?: CartWhereInput[] | CartWhereInput;
  NOT?: CartWhereInput[] | CartWhereInput;
}

export interface OrderShippingAddressUpdateOneRequiredWithoutOrderInput {
  create?: OrderShippingAddressCreateWithoutOrderInput;
  update?: OrderShippingAddressUpdateWithoutOrderDataInput;
  upsert?: OrderShippingAddressUpsertWithoutOrderInput;
  connect?: OrderShippingAddressWhereUniqueInput;
}

export interface UserUpdateInput {
  email?: String;
  password?: String;
  firstName?: String;
  lastName?: String;
  posts?: PostUpdateManyWithoutAuthorInput;
  subscribed?: Boolean;
  role?: Role;
  addresses?: AddressUpdateManyWithoutCustomerInput;
  orders?: OrderUpdateManyWithoutCustomerInput;
  cart?: CartUpdateOneRequiredWithoutCustomerInput;
  payments?: PaymentUpdateManyWithoutCustomerInput;
}

export interface OrderShippingAddressUpdateWithoutOrderDataInput {
  street?: String;
  number?: String;
  complement?: String;
  zip?: String;
  district?: String;
  city?: String;
  state?: String;
  country?: String;
  firstName?: String;
  lastName?: String;
}

export interface ProductVariantUpdateInput {
  name?: String;
  information?: String;
  image?: String;
  product?: ProductUpdateOneRequiredWithoutVariantsInput;
}

export interface OrderShippingAddressUpsertWithoutOrderInput {
  update: OrderShippingAddressUpdateWithoutOrderDataInput;
  create: OrderShippingAddressCreateWithoutOrderInput;
}

export type NewsletterSubscriptionWhereUniqueInput = AtLeastOne<{
  email: String;
}>;

export interface OrderUpsertWithoutPaymentInput {
  update: OrderUpdateWithoutPaymentDataInput;
  create: OrderCreateWithoutPaymentInput;
}

export interface PaymentUpdateManyMutationInput {
  paymentId?: String;
  type?: String;
  currency?: String;
  merchantOrderId?: String;
  customerName?: String;
  tid?: String;
  proofOfSale?: String;
  authorizationCode?: String;
  softDescriptor?: String;
  provider?: String;
  amount?: Int;
  serviceTaxAmount?: Int;
  installments?: Int;
  interest?: Int;
  capture?: Boolean;
  authenticate?: Boolean;
  recurrent?: Boolean;
  receivedDate?: DateTimeInput;
  status?: Int;
  isSplitted?: Boolean;
  returnMessage?: String;
  returnCode?: String;
}

export interface CupomUpdateOneInput {
  create?: CupomCreateInput;
  update?: CupomUpdateDataInput;
  upsert?: CupomUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CupomWhereUniqueInput;
}

export type PaymentWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CupomUpdateDataInput {
  discount?: Int;
  code?: String;
}

export type ProductWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
}>;

export interface CupomUpsertNestedInput {
  update: CupomUpdateDataInput;
  create: CupomCreateInput;
}

export interface CupomUpdateInput {
  discount?: Int;
  code?: String;
}

export interface PaymentUpsertWithWhereUniqueWithoutCustomerInput {
  where: PaymentWhereUniqueInput;
  update: PaymentUpdateWithoutCustomerDataInput;
  create: PaymentCreateWithoutCustomerInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface PaymentScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  paymentId?: String;
  paymentId_not?: String;
  paymentId_in?: String[] | String;
  paymentId_not_in?: String[] | String;
  paymentId_lt?: String;
  paymentId_lte?: String;
  paymentId_gt?: String;
  paymentId_gte?: String;
  paymentId_contains?: String;
  paymentId_not_contains?: String;
  paymentId_starts_with?: String;
  paymentId_not_starts_with?: String;
  paymentId_ends_with?: String;
  paymentId_not_ends_with?: String;
  type?: String;
  type_not?: String;
  type_in?: String[] | String;
  type_not_in?: String[] | String;
  type_lt?: String;
  type_lte?: String;
  type_gt?: String;
  type_gte?: String;
  type_contains?: String;
  type_not_contains?: String;
  type_starts_with?: String;
  type_not_starts_with?: String;
  type_ends_with?: String;
  type_not_ends_with?: String;
  currency?: String;
  currency_not?: String;
  currency_in?: String[] | String;
  currency_not_in?: String[] | String;
  currency_lt?: String;
  currency_lte?: String;
  currency_gt?: String;
  currency_gte?: String;
  currency_contains?: String;
  currency_not_contains?: String;
  currency_starts_with?: String;
  currency_not_starts_with?: String;
  currency_ends_with?: String;
  currency_not_ends_with?: String;
  merchantOrderId?: String;
  merchantOrderId_not?: String;
  merchantOrderId_in?: String[] | String;
  merchantOrderId_not_in?: String[] | String;
  merchantOrderId_lt?: String;
  merchantOrderId_lte?: String;
  merchantOrderId_gt?: String;
  merchantOrderId_gte?: String;
  merchantOrderId_contains?: String;
  merchantOrderId_not_contains?: String;
  merchantOrderId_starts_with?: String;
  merchantOrderId_not_starts_with?: String;
  merchantOrderId_ends_with?: String;
  merchantOrderId_not_ends_with?: String;
  customerName?: String;
  customerName_not?: String;
  customerName_in?: String[] | String;
  customerName_not_in?: String[] | String;
  customerName_lt?: String;
  customerName_lte?: String;
  customerName_gt?: String;
  customerName_gte?: String;
  customerName_contains?: String;
  customerName_not_contains?: String;
  customerName_starts_with?: String;
  customerName_not_starts_with?: String;
  customerName_ends_with?: String;
  customerName_not_ends_with?: String;
  tid?: String;
  tid_not?: String;
  tid_in?: String[] | String;
  tid_not_in?: String[] | String;
  tid_lt?: String;
  tid_lte?: String;
  tid_gt?: String;
  tid_gte?: String;
  tid_contains?: String;
  tid_not_contains?: String;
  tid_starts_with?: String;
  tid_not_starts_with?: String;
  tid_ends_with?: String;
  tid_not_ends_with?: String;
  proofOfSale?: String;
  proofOfSale_not?: String;
  proofOfSale_in?: String[] | String;
  proofOfSale_not_in?: String[] | String;
  proofOfSale_lt?: String;
  proofOfSale_lte?: String;
  proofOfSale_gt?: String;
  proofOfSale_gte?: String;
  proofOfSale_contains?: String;
  proofOfSale_not_contains?: String;
  proofOfSale_starts_with?: String;
  proofOfSale_not_starts_with?: String;
  proofOfSale_ends_with?: String;
  proofOfSale_not_ends_with?: String;
  authorizationCode?: String;
  authorizationCode_not?: String;
  authorizationCode_in?: String[] | String;
  authorizationCode_not_in?: String[] | String;
  authorizationCode_lt?: String;
  authorizationCode_lte?: String;
  authorizationCode_gt?: String;
  authorizationCode_gte?: String;
  authorizationCode_contains?: String;
  authorizationCode_not_contains?: String;
  authorizationCode_starts_with?: String;
  authorizationCode_not_starts_with?: String;
  authorizationCode_ends_with?: String;
  authorizationCode_not_ends_with?: String;
  softDescriptor?: String;
  softDescriptor_not?: String;
  softDescriptor_in?: String[] | String;
  softDescriptor_not_in?: String[] | String;
  softDescriptor_lt?: String;
  softDescriptor_lte?: String;
  softDescriptor_gt?: String;
  softDescriptor_gte?: String;
  softDescriptor_contains?: String;
  softDescriptor_not_contains?: String;
  softDescriptor_starts_with?: String;
  softDescriptor_not_starts_with?: String;
  softDescriptor_ends_with?: String;
  softDescriptor_not_ends_with?: String;
  provider?: String;
  provider_not?: String;
  provider_in?: String[] | String;
  provider_not_in?: String[] | String;
  provider_lt?: String;
  provider_lte?: String;
  provider_gt?: String;
  provider_gte?: String;
  provider_contains?: String;
  provider_not_contains?: String;
  provider_starts_with?: String;
  provider_not_starts_with?: String;
  provider_ends_with?: String;
  provider_not_ends_with?: String;
  amount?: Int;
  amount_not?: Int;
  amount_in?: Int[] | Int;
  amount_not_in?: Int[] | Int;
  amount_lt?: Int;
  amount_lte?: Int;
  amount_gt?: Int;
  amount_gte?: Int;
  serviceTaxAmount?: Int;
  serviceTaxAmount_not?: Int;
  serviceTaxAmount_in?: Int[] | Int;
  serviceTaxAmount_not_in?: Int[] | Int;
  serviceTaxAmount_lt?: Int;
  serviceTaxAmount_lte?: Int;
  serviceTaxAmount_gt?: Int;
  serviceTaxAmount_gte?: Int;
  installments?: Int;
  installments_not?: Int;
  installments_in?: Int[] | Int;
  installments_not_in?: Int[] | Int;
  installments_lt?: Int;
  installments_lte?: Int;
  installments_gt?: Int;
  installments_gte?: Int;
  interest?: Int;
  interest_not?: Int;
  interest_in?: Int[] | Int;
  interest_not_in?: Int[] | Int;
  interest_lt?: Int;
  interest_lte?: Int;
  interest_gt?: Int;
  interest_gte?: Int;
  capture?: Boolean;
  capture_not?: Boolean;
  authenticate?: Boolean;
  authenticate_not?: Boolean;
  recurrent?: Boolean;
  recurrent_not?: Boolean;
  receivedDate?: DateTimeInput;
  receivedDate_not?: DateTimeInput;
  receivedDate_in?: DateTimeInput[] | DateTimeInput;
  receivedDate_not_in?: DateTimeInput[] | DateTimeInput;
  receivedDate_lt?: DateTimeInput;
  receivedDate_lte?: DateTimeInput;
  receivedDate_gt?: DateTimeInput;
  receivedDate_gte?: DateTimeInput;
  status?: Int;
  status_not?: Int;
  status_in?: Int[] | Int;
  status_not_in?: Int[] | Int;
  status_lt?: Int;
  status_lte?: Int;
  status_gt?: Int;
  status_gte?: Int;
  isSplitted?: Boolean;
  isSplitted_not?: Boolean;
  returnMessage?: String;
  returnMessage_not?: String;
  returnMessage_in?: String[] | String;
  returnMessage_not_in?: String[] | String;
  returnMessage_lt?: String;
  returnMessage_lte?: String;
  returnMessage_gt?: String;
  returnMessage_gte?: String;
  returnMessage_contains?: String;
  returnMessage_not_contains?: String;
  returnMessage_starts_with?: String;
  returnMessage_not_starts_with?: String;
  returnMessage_ends_with?: String;
  returnMessage_not_ends_with?: String;
  returnCode?: String;
  returnCode_not?: String;
  returnCode_in?: String[] | String;
  returnCode_not_in?: String[] | String;
  returnCode_lt?: String;
  returnCode_lte?: String;
  returnCode_gt?: String;
  returnCode_gte?: String;
  returnCode_contains?: String;
  returnCode_not_contains?: String;
  returnCode_starts_with?: String;
  returnCode_not_starts_with?: String;
  returnCode_ends_with?: String;
  returnCode_not_ends_with?: String;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  AND?: PaymentScalarWhereInput[] | PaymentScalarWhereInput;
  OR?: PaymentScalarWhereInput[] | PaymentScalarWhereInput;
  NOT?: PaymentScalarWhereInput[] | PaymentScalarWhereInput;
}

export interface UserCreateWithoutAddressesInput {
  email: String;
  password: String;
  firstName?: String;
  lastName?: String;
  posts?: PostCreateManyWithoutAuthorInput;
  subscribed?: Boolean;
  role?: Role;
  orders?: OrderCreateManyWithoutCustomerInput;
  cart: CartCreateOneWithoutCustomerInput;
  payments?: PaymentCreateManyWithoutCustomerInput;
}

export interface PaymentUpdateManyWithWhereNestedInput {
  where: PaymentScalarWhereInput;
  data: PaymentUpdateManyDataInput;
}

export interface CartItemCreateWithoutCartInput {
  product?: ProductCreateOneInput;
  quantity?: Int;
  variants?: ProductVariantCreateManyInput;
}

export interface PaymentUpdateManyDataInput {
  paymentId?: String;
  type?: String;
  currency?: String;
  merchantOrderId?: String;
  customerName?: String;
  tid?: String;
  proofOfSale?: String;
  authorizationCode?: String;
  softDescriptor?: String;
  provider?: String;
  amount?: Int;
  serviceTaxAmount?: Int;
  installments?: Int;
  interest?: Int;
  capture?: Boolean;
  authenticate?: Boolean;
  recurrent?: Boolean;
  receivedDate?: DateTimeInput;
  status?: Int;
  isSplitted?: Boolean;
  returnMessage?: String;
  returnCode?: String;
}

export interface ProductCreateWithoutVariantsInput {
  price: Int;
  name: String;
  stockQuantity?: Int;
  description?: String;
  image?: String;
}

export interface UserUpsertWithoutCartInput {
  update: UserUpdateWithoutCartDataInput;
  create: UserCreateWithoutCartInput;
}

export interface OrderShippingAddressSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: OrderShippingAddressWhereInput;
  AND?:
    | OrderShippingAddressSubscriptionWhereInput[]
    | OrderShippingAddressSubscriptionWhereInput;
  OR?:
    | OrderShippingAddressSubscriptionWhereInput[]
    | OrderShippingAddressSubscriptionWhereInput;
  NOT?:
    | OrderShippingAddressSubscriptionWhereInput[]
    | OrderShippingAddressSubscriptionWhereInput;
}

export interface CartUpsertNestedInput {
  update: CartUpdateDataInput;
  create: CartCreateInput;
}

export interface StoresCreateInput {
  latitude: Float;
  longitude: Float;
  image?: String;
  name: String;
  description?: String;
  address?: String;
  city?: String;
  zip?: String;
}

export interface PaymentUpdateOneWithoutOrderInput {
  create?: PaymentCreateWithoutOrderInput;
  update?: PaymentUpdateWithoutOrderDataInput;
  upsert?: PaymentUpsertWithoutOrderInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: PaymentWhereUniqueInput;
}

export interface UserCreateWithoutPostsInput {
  email: String;
  password: String;
  firstName?: String;
  lastName?: String;
  subscribed?: Boolean;
  role?: Role;
  addresses?: AddressCreateManyWithoutCustomerInput;
  orders?: OrderCreateManyWithoutCustomerInput;
  cart: CartCreateOneWithoutCustomerInput;
  payments?: PaymentCreateManyWithoutCustomerInput;
}

export interface PaymentUpdateWithoutOrderDataInput {
  paymentId?: String;
  type?: String;
  currency?: String;
  creditCard?: CreditCardUpdateOneInput;
  customer?: UserUpdateOneRequiredWithoutPaymentsInput;
  merchantOrderId?: String;
  customerName?: String;
  tid?: String;
  proofOfSale?: String;
  authorizationCode?: String;
  softDescriptor?: String;
  provider?: String;
  amount?: Int;
  serviceTaxAmount?: Int;
  installments?: Int;
  interest?: Int;
  capture?: Boolean;
  authenticate?: Boolean;
  recurrent?: Boolean;
  receivedDate?: DateTimeInput;
  cupom?: CupomUpdateOneInput;
  status?: Int;
  isSplitted?: Boolean;
  returnMessage?: String;
  returnCode?: String;
}

export type PostWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserUpdateOneRequiredWithoutPaymentsInput {
  create?: UserCreateWithoutPaymentsInput;
  update?: UserUpdateWithoutPaymentsDataInput;
  upsert?: UserUpsertWithoutPaymentsInput;
  connect?: UserWhereUniqueInput;
}

export interface CartItemUpdateManyMutationInput {
  quantity?: Int;
}

export interface UserUpdateWithoutPaymentsDataInput {
  email?: String;
  password?: String;
  firstName?: String;
  lastName?: String;
  posts?: PostUpdateManyWithoutAuthorInput;
  subscribed?: Boolean;
  role?: Role;
  addresses?: AddressUpdateManyWithoutCustomerInput;
  orders?: OrderUpdateManyWithoutCustomerInput;
  cart?: CartUpdateOneRequiredWithoutCustomerInput;
}

export interface OrderCreateWithoutCustomerInput {
  recurrying?: Boolean;
  status?: OrderStatus;
  cart: CartCreateOneInput;
  subTotalPrice: Int;
  totalShippingPrice?: Int;
  totalPrice: Int;
  processedAt?: DateTimeInput;
  shippingAddress: OrderShippingAddressCreateOneWithoutOrderInput;
  payment?: PaymentCreateOneWithoutOrderInput;
}

export interface UserUpsertWithoutPaymentsInput {
  update: UserUpdateWithoutPaymentsDataInput;
  create: UserCreateWithoutPaymentsInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface PaymentUpsertWithoutOrderInput {
  update: PaymentUpdateWithoutOrderDataInput;
  create: PaymentCreateWithoutOrderInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  posts_every?: PostWhereInput;
  posts_some?: PostWhereInput;
  posts_none?: PostWhereInput;
  subscribed?: Boolean;
  subscribed_not?: Boolean;
  role?: Role;
  role_not?: Role;
  role_in?: Role[] | Role;
  role_not_in?: Role[] | Role;
  addresses_every?: AddressWhereInput;
  addresses_some?: AddressWhereInput;
  addresses_none?: AddressWhereInput;
  orders_every?: OrderWhereInput;
  orders_some?: OrderWhereInput;
  orders_none?: OrderWhereInput;
  cart?: CartWhereInput;
  payments_every?: PaymentWhereInput;
  payments_some?: PaymentWhereInput;
  payments_none?: PaymentWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface OrderUpsertWithWhereUniqueWithoutCustomerInput {
  where: OrderWhereUniqueInput;
  update: OrderUpdateWithoutCustomerDataInput;
  create: OrderCreateWithoutCustomerInput;
}

export interface NewsletterSubscriptionUpdateInput {
  email?: String;
}

export interface UserUpsertWithoutAddressesInput {
  update: UserUpdateWithoutAddressesDataInput;
  create: UserCreateWithoutAddressesInput;
}

export interface OrderUpdateManyDataInput {
  recurrying?: Boolean;
  status?: OrderStatus;
  subTotalPrice?: Int;
  totalShippingPrice?: Int;
  totalPrice?: Int;
  processedAt?: DateTimeInput;
}

export interface OrderUpdateManyWithWhereNestedInput {
  where: OrderScalarWhereInput;
  data: OrderUpdateManyDataInput;
}

export interface OrderScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  recurrying?: Boolean;
  recurrying_not?: Boolean;
  status?: OrderStatus;
  status_not?: OrderStatus;
  status_in?: OrderStatus[] | OrderStatus;
  status_not_in?: OrderStatus[] | OrderStatus;
  subTotalPrice?: Int;
  subTotalPrice_not?: Int;
  subTotalPrice_in?: Int[] | Int;
  subTotalPrice_not_in?: Int[] | Int;
  subTotalPrice_lt?: Int;
  subTotalPrice_lte?: Int;
  subTotalPrice_gt?: Int;
  subTotalPrice_gte?: Int;
  totalShippingPrice?: Int;
  totalShippingPrice_not?: Int;
  totalShippingPrice_in?: Int[] | Int;
  totalShippingPrice_not_in?: Int[] | Int;
  totalShippingPrice_lt?: Int;
  totalShippingPrice_lte?: Int;
  totalShippingPrice_gt?: Int;
  totalShippingPrice_gte?: Int;
  totalPrice?: Int;
  totalPrice_not?: Int;
  totalPrice_in?: Int[] | Int;
  totalPrice_not_in?: Int[] | Int;
  totalPrice_lt?: Int;
  totalPrice_lte?: Int;
  totalPrice_gt?: Int;
  totalPrice_gte?: Int;
  processedAt?: DateTimeInput;
  processedAt_not?: DateTimeInput;
  processedAt_in?: DateTimeInput[] | DateTimeInput;
  processedAt_not_in?: DateTimeInput[] | DateTimeInput;
  processedAt_lt?: DateTimeInput;
  processedAt_lte?: DateTimeInput;
  processedAt_gt?: DateTimeInput;
  processedAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  AND?: OrderScalarWhereInput[] | OrderScalarWhereInput;
  OR?: OrderScalarWhereInput[] | OrderScalarWhereInput;
  NOT?: OrderScalarWhereInput[] | OrderScalarWhereInput;
}

export interface CartItemCreateInput {
  cart: CartCreateOneWithoutProductsInput;
  product?: ProductCreateOneInput;
  quantity?: Int;
  variants?: ProductVariantCreateManyInput;
}

export interface OrderShippingAddressUpdateManyMutationInput {
  street?: String;
  number?: String;
  complement?: String;
  zip?: String;
  district?: String;
  city?: String;
  state?: String;
  country?: String;
  firstName?: String;
  lastName?: String;
}

export interface AddressSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AddressWhereInput;
  AND?: AddressSubscriptionWhereInput[] | AddressSubscriptionWhereInput;
  OR?: AddressSubscriptionWhereInput[] | AddressSubscriptionWhereInput;
  NOT?: AddressSubscriptionWhereInput[] | AddressSubscriptionWhereInput;
}

export interface ProductVariantCreateWithoutProductInput {
  name: String;
  information?: String;
  image?: String;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  password: String;
  firstName?: String;
  lastName?: String;
  subscribed?: Boolean;
  role: Role;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  subscribed: () => Promise<Boolean>;
  role: () => Promise<Role>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  subscribed: () => Promise<AsyncIterator<Boolean>>;
  role: () => Promise<AsyncIterator<Role>>;
}

export interface AggregateCart {
  count: Int;
}

export interface AggregateCartPromise
  extends Promise<AggregateCart>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCartSubscription
  extends Promise<AsyncIterator<AggregateCart>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Post {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  isPublished: Boolean;
  title: String;
  body: String;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  isPublished: () => Promise<Boolean>;
  title: () => Promise<String>;
  body: () => Promise<String>;
  author: <T = UserPromise>() => T;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  title: () => Promise<AsyncIterator<String>>;
  body: () => Promise<AsyncIterator<String>>;
  author: <T = UserSubscription>() => T;
}

export interface CartEdge {
  node: Cart;
  cursor: String;
}

export interface CartEdgePromise extends Promise<CartEdge>, Fragmentable {
  node: <T = CartPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CartEdgeSubscription
  extends Promise<AsyncIterator<CartEdge>>,
    Fragmentable {
  node: <T = CartSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CartConnection {
  pageInfo: PageInfo;
  edges: CartEdge[];
}

export interface CartConnectionPromise
  extends Promise<CartConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CartEdge>>() => T;
  aggregate: <T = AggregateCartPromise>() => T;
}

export interface CartConnectionSubscription
  extends Promise<AsyncIterator<CartConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CartEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCartSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Order {
  id: ID_Output;
  recurrying: Boolean;
  status: OrderStatus;
  subTotalPrice: Int;
  totalShippingPrice?: Int;
  totalPrice: Int;
  processedAt?: DateTimeOutput;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface OrderPromise extends Promise<Order>, Fragmentable {
  id: () => Promise<ID_Output>;
  recurrying: () => Promise<Boolean>;
  status: () => Promise<OrderStatus>;
  cart: <T = CartPromise>() => T;
  subTotalPrice: () => Promise<Int>;
  totalShippingPrice: () => Promise<Int>;
  totalPrice: () => Promise<Int>;
  customer: <T = UserPromise>() => T;
  processedAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  shippingAddress: <T = OrderShippingAddressPromise>() => T;
  payment: <T = PaymentPromise>() => T;
}

export interface OrderSubscription
  extends Promise<AsyncIterator<Order>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  recurrying: () => Promise<AsyncIterator<Boolean>>;
  status: () => Promise<AsyncIterator<OrderStatus>>;
  cart: <T = CartSubscription>() => T;
  subTotalPrice: () => Promise<AsyncIterator<Int>>;
  totalShippingPrice: () => Promise<AsyncIterator<Int>>;
  totalPrice: () => Promise<AsyncIterator<Int>>;
  customer: <T = UserSubscription>() => T;
  processedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  shippingAddress: <T = OrderShippingAddressSubscription>() => T;
  payment: <T = PaymentSubscription>() => T;
}

export interface ProductVariantPreviousValues {
  id: ID_Output;
  name: String;
  information?: String;
  image?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface ProductVariantPreviousValuesPromise
  extends Promise<ProductVariantPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  information: () => Promise<String>;
  image: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ProductVariantPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductVariantPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  information: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateAddress {
  count: Int;
}

export interface AggregateAddressPromise
  extends Promise<AggregateAddress>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAddressSubscription
  extends Promise<AsyncIterator<AggregateAddress>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface StoresConnection {
  pageInfo: PageInfo;
  edges: StoresEdge[];
}

export interface StoresConnectionPromise
  extends Promise<StoresConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<StoresEdge>>() => T;
  aggregate: <T = AggregateStoresPromise>() => T;
}

export interface StoresConnectionSubscription
  extends Promise<AsyncIterator<StoresConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StoresEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStoresSubscription>() => T;
}

export interface AggregateStores {
  count: Int;
}

export interface AggregateStoresPromise
  extends Promise<AggregateStores>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStoresSubscription
  extends Promise<AsyncIterator<AggregateStores>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  email: String;
  password: String;
  firstName?: String;
  lastName?: String;
  subscribed?: Boolean;
  role: Role;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  subscribed: () => Promise<Boolean>;
  role: () => Promise<Role>;
  addresses: <T = FragmentableArray<Address>>(args?: {
    where?: AddressWhereInput;
    orderBy?: AddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  orders: <T = FragmentableArray<Order>>(args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  cart: <T = CartPromise>() => T;
  payments: <T = FragmentableArray<Payment>>(args?: {
    where?: PaymentWhereInput;
    orderBy?: PaymentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  subscribed: () => Promise<AsyncIterator<Boolean>>;
  role: () => Promise<AsyncIterator<Role>>;
  addresses: <T = Promise<AsyncIterator<AddressSubscription>>>(args?: {
    where?: AddressWhereInput;
    orderBy?: AddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  orders: <T = Promise<AsyncIterator<OrderSubscription>>>(args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  cart: <T = CartSubscription>() => T;
  payments: <T = Promise<AsyncIterator<PaymentSubscription>>>(args?: {
    where?: PaymentWhereInput;
    orderBy?: PaymentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Address {
  id: ID_Output;
  type: AddressType;
  street: String;
  number: String;
  complement?: String;
  zip: String;
  district?: String;
  city?: String;
  state?: String;
  country?: String;
  firstName: String;
  lastName: String;
}

export interface AddressPromise extends Promise<Address>, Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<AddressType>;
  street: () => Promise<String>;
  number: () => Promise<String>;
  complement: () => Promise<String>;
  zip: () => Promise<String>;
  district: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  country: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  customer: <T = UserPromise>() => T;
}

export interface AddressSubscription
  extends Promise<AsyncIterator<Address>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<AddressType>>;
  street: () => Promise<AsyncIterator<String>>;
  number: () => Promise<AsyncIterator<String>>;
  complement: () => Promise<AsyncIterator<String>>;
  zip: () => Promise<AsyncIterator<String>>;
  district: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  customer: <T = UserSubscription>() => T;
}

export interface AggregateProductVariant {
  count: Int;
}

export interface AggregateProductVariantPromise
  extends Promise<AggregateProductVariant>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductVariantSubscription
  extends Promise<AsyncIterator<AggregateProductVariant>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AddressSubscriptionPayload {
  mutation: MutationType;
  node: Address;
  updatedFields: String[];
  previousValues: AddressPreviousValues;
}

export interface AddressSubscriptionPayloadPromise
  extends Promise<AddressSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AddressPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AddressPreviousValuesPromise>() => T;
}

export interface AddressSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AddressSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AddressSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AddressPreviousValuesSubscription>() => T;
}

export interface ProductVariantConnection {
  pageInfo: PageInfo;
  edges: ProductVariantEdge[];
}

export interface ProductVariantConnectionPromise
  extends Promise<ProductVariantConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductVariantEdge>>() => T;
  aggregate: <T = AggregateProductVariantPromise>() => T;
}

export interface ProductVariantConnectionSubscription
  extends Promise<AsyncIterator<ProductVariantConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductVariantEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductVariantSubscription>() => T;
}

export interface AddressPreviousValues {
  id: ID_Output;
  type: AddressType;
  street: String;
  number: String;
  complement?: String;
  zip: String;
  district?: String;
  city?: String;
  state?: String;
  country?: String;
  firstName: String;
  lastName: String;
}

export interface AddressPreviousValuesPromise
  extends Promise<AddressPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<AddressType>;
  street: () => Promise<String>;
  number: () => Promise<String>;
  complement: () => Promise<String>;
  zip: () => Promise<String>;
  district: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  country: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
}

export interface AddressPreviousValuesSubscription
  extends Promise<AsyncIterator<AddressPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<AddressType>>;
  street: () => Promise<AsyncIterator<String>>;
  number: () => Promise<AsyncIterator<String>>;
  complement: () => Promise<AsyncIterator<String>>;
  zip: () => Promise<AsyncIterator<String>>;
  district: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
}

export interface ProductEdge {
  node: Product;
  cursor: String;
}

export interface ProductEdgePromise extends Promise<ProductEdge>, Fragmentable {
  node: <T = ProductPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductEdgeSubscription
  extends Promise<AsyncIterator<ProductEdge>>,
    Fragmentable {
  node: <T = ProductSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AddressEdge {
  node: Address;
  cursor: String;
}

export interface AddressEdgePromise extends Promise<AddressEdge>, Fragmentable {
  node: <T = AddressPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AddressEdgeSubscription
  extends Promise<AsyncIterator<AddressEdge>>,
    Fragmentable {
  node: <T = AddressSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CartSubscriptionPayload {
  mutation: MutationType;
  node: Cart;
  updatedFields: String[];
  previousValues: CartPreviousValues;
}

export interface CartSubscriptionPayloadPromise
  extends Promise<CartSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CartPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CartPreviousValuesPromise>() => T;
}

export interface CartSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CartSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CartSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CartPreviousValuesSubscription>() => T;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface CartPreviousValues {
  id: ID_Output;
  updatedAt: DateTimeOutput;
}

export interface CartPreviousValuesPromise
  extends Promise<CartPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CartPreviousValuesSubscription
  extends Promise<AsyncIterator<CartPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PaymentEdge {
  node: Payment;
  cursor: String;
}

export interface PaymentEdgePromise extends Promise<PaymentEdge>, Fragmentable {
  node: <T = PaymentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PaymentEdgeSubscription
  extends Promise<AsyncIterator<PaymentEdge>>,
    Fragmentable {
  node: <T = PaymentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOrderShippingAddress {
  count: Int;
}

export interface AggregateOrderShippingAddressPromise
  extends Promise<AggregateOrderShippingAddress>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrderShippingAddressSubscription
  extends Promise<AsyncIterator<AggregateOrderShippingAddress>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CartItemSubscriptionPayload {
  mutation: MutationType;
  node: CartItem;
  updatedFields: String[];
  previousValues: CartItemPreviousValues;
}

export interface CartItemSubscriptionPayloadPromise
  extends Promise<CartItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CartItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CartItemPreviousValuesPromise>() => T;
}

export interface CartItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CartItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CartItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CartItemPreviousValuesSubscription>() => T;
}

export interface OrderShippingAddressConnection {
  pageInfo: PageInfo;
  edges: OrderShippingAddressEdge[];
}

export interface OrderShippingAddressConnectionPromise
  extends Promise<OrderShippingAddressConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrderShippingAddressEdge>>() => T;
  aggregate: <T = AggregateOrderShippingAddressPromise>() => T;
}

export interface OrderShippingAddressConnectionSubscription
  extends Promise<AsyncIterator<OrderShippingAddressConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<OrderShippingAddressEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateOrderShippingAddressSubscription>() => T;
}

export interface CartItemPreviousValues {
  id: ID_Output;
  quantity?: Int;
}

export interface CartItemPreviousValuesPromise
  extends Promise<CartItemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  quantity: () => Promise<Int>;
}

export interface CartItemPreviousValuesSubscription
  extends Promise<AsyncIterator<CartItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  quantity: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateOrder {
  count: Int;
}

export interface AggregateOrderPromise
  extends Promise<AggregateOrder>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrderSubscription
  extends Promise<AsyncIterator<AggregateOrder>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AddressConnection {
  pageInfo: PageInfo;
  edges: AddressEdge[];
}

export interface AddressConnectionPromise
  extends Promise<AddressConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AddressEdge>>() => T;
  aggregate: <T = AggregateAddressPromise>() => T;
}

export interface AddressConnectionSubscription
  extends Promise<AsyncIterator<AddressConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AddressEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAddressSubscription>() => T;
}

export interface OrderConnection {
  pageInfo: PageInfo;
  edges: OrderEdge[];
}

export interface OrderConnectionPromise
  extends Promise<OrderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrderEdge>>() => T;
  aggregate: <T = AggregateOrderPromise>() => T;
}

export interface OrderConnectionSubscription
  extends Promise<AsyncIterator<OrderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrderEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrderSubscription>() => T;
}

export interface CreditCardSubscriptionPayload {
  mutation: MutationType;
  node: CreditCard;
  updatedFields: String[];
  previousValues: CreditCardPreviousValues;
}

export interface CreditCardSubscriptionPayloadPromise
  extends Promise<CreditCardSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CreditCardPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CreditCardPreviousValuesPromise>() => T;
}

export interface CreditCardSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CreditCardSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CreditCardSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CreditCardPreviousValuesSubscription>() => T;
}

export interface NewsletterSubscriptionEdge {
  node: NewsletterSubscription;
  cursor: String;
}

export interface NewsletterSubscriptionEdgePromise
  extends Promise<NewsletterSubscriptionEdge>,
    Fragmentable {
  node: <T = NewsletterSubscriptionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface NewsletterSubscriptionEdgeSubscription
  extends Promise<AsyncIterator<NewsletterSubscriptionEdge>>,
    Fragmentable {
  node: <T = NewsletterSubscriptionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CreditCardPreviousValues {
  id: ID_Output;
  cardNumber: String;
  holder: String;
  expirationDate: String;
  saveCard?: Boolean;
  brand: String;
}

export interface CreditCardPreviousValuesPromise
  extends Promise<CreditCardPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  cardNumber: () => Promise<String>;
  holder: () => Promise<String>;
  expirationDate: () => Promise<String>;
  saveCard: () => Promise<Boolean>;
  brand: () => Promise<String>;
}

export interface CreditCardPreviousValuesSubscription
  extends Promise<AsyncIterator<CreditCardPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  cardNumber: () => Promise<AsyncIterator<String>>;
  holder: () => Promise<AsyncIterator<String>>;
  expirationDate: () => Promise<AsyncIterator<String>>;
  saveCard: () => Promise<AsyncIterator<Boolean>>;
  brand: () => Promise<AsyncIterator<String>>;
}

export interface StoresSubscriptionPayload {
  mutation: MutationType;
  node: Stores;
  updatedFields: String[];
  previousValues: StoresPreviousValues;
}

export interface StoresSubscriptionPayloadPromise
  extends Promise<StoresSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StoresPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StoresPreviousValuesPromise>() => T;
}

export interface StoresSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StoresSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StoresSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StoresPreviousValuesSubscription>() => T;
}

export interface Cupom {
  id: ID_Output;
  discount: Int;
  code: String;
  updatedAt: DateTimeOutput;
}

export interface CupomPromise extends Promise<Cupom>, Fragmentable {
  id: () => Promise<ID_Output>;
  discount: () => Promise<Int>;
  code: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CupomSubscription
  extends Promise<AsyncIterator<Cupom>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  discount: () => Promise<AsyncIterator<Int>>;
  code: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateCupom {
  count: Int;
}

export interface AggregateCupomPromise
  extends Promise<AggregateCupom>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCupomSubscription
  extends Promise<AsyncIterator<AggregateCupom>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CupomSubscriptionPayload {
  mutation: MutationType;
  node: Cupom;
  updatedFields: String[];
  previousValues: CupomPreviousValues;
}

export interface CupomSubscriptionPayloadPromise
  extends Promise<CupomSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CupomPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CupomPreviousValuesPromise>() => T;
}

export interface CupomSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CupomSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CupomSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CupomPreviousValuesSubscription>() => T;
}

export interface CupomConnection {
  pageInfo: PageInfo;
  edges: CupomEdge[];
}

export interface CupomConnectionPromise
  extends Promise<CupomConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CupomEdge>>() => T;
  aggregate: <T = AggregateCupomPromise>() => T;
}

export interface CupomConnectionSubscription
  extends Promise<AsyncIterator<CupomConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CupomEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCupomSubscription>() => T;
}

export interface CupomPreviousValues {
  id: ID_Output;
  discount: Int;
  code: String;
  updatedAt: DateTimeOutput;
}

export interface CupomPreviousValuesPromise
  extends Promise<CupomPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  discount: () => Promise<Int>;
  code: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CupomPreviousValuesSubscription
  extends Promise<AsyncIterator<CupomPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  discount: () => Promise<AsyncIterator<Int>>;
  code: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CreditCardEdge {
  node: CreditCard;
  cursor: String;
}

export interface CreditCardEdgePromise
  extends Promise<CreditCardEdge>,
    Fragmentable {
  node: <T = CreditCardPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CreditCardEdgeSubscription
  extends Promise<AsyncIterator<CreditCardEdge>>,
    Fragmentable {
  node: <T = CreditCardSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CreditCard {
  id: ID_Output;
  cardNumber: String;
  holder: String;
  expirationDate: String;
  saveCard?: Boolean;
  brand: String;
}

export interface CreditCardPromise extends Promise<CreditCard>, Fragmentable {
  id: () => Promise<ID_Output>;
  cardNumber: () => Promise<String>;
  holder: () => Promise<String>;
  expirationDate: () => Promise<String>;
  saveCard: () => Promise<Boolean>;
  brand: () => Promise<String>;
}

export interface CreditCardSubscription
  extends Promise<AsyncIterator<CreditCard>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  cardNumber: () => Promise<AsyncIterator<String>>;
  holder: () => Promise<AsyncIterator<String>>;
  expirationDate: () => Promise<AsyncIterator<String>>;
  saveCard: () => Promise<AsyncIterator<Boolean>>;
  brand: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCartItem {
  count: Int;
}

export interface AggregateCartItemPromise
  extends Promise<AggregateCartItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCartItemSubscription
  extends Promise<AsyncIterator<AggregateCartItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface NewsletterSubscriptionSubscriptionPayload {
  mutation: MutationType;
  node: NewsletterSubscription;
  updatedFields: String[];
  previousValues: NewsletterSubscriptionPreviousValues;
}

export interface NewsletterSubscriptionSubscriptionPayloadPromise
  extends Promise<NewsletterSubscriptionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NewsletterSubscriptionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NewsletterSubscriptionPreviousValuesPromise>() => T;
}

export interface NewsletterSubscriptionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NewsletterSubscriptionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NewsletterSubscriptionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NewsletterSubscriptionPreviousValuesSubscription>() => T;
}

export interface CartItemConnection {
  pageInfo: PageInfo;
  edges: CartItemEdge[];
}

export interface CartItemConnectionPromise
  extends Promise<CartItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CartItemEdge>>() => T;
  aggregate: <T = AggregateCartItemPromise>() => T;
}

export interface CartItemConnectionSubscription
  extends Promise<AsyncIterator<CartItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CartItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCartItemSubscription>() => T;
}

export interface NewsletterSubscriptionPreviousValues {
  email: String;
}

export interface NewsletterSubscriptionPreviousValuesPromise
  extends Promise<NewsletterSubscriptionPreviousValues>,
    Fragmentable {
  email: () => Promise<String>;
}

export interface NewsletterSubscriptionPreviousValuesSubscription
  extends Promise<AsyncIterator<NewsletterSubscriptionPreviousValues>>,
    Fragmentable {
  email: () => Promise<AsyncIterator<String>>;
}

export interface Stores {
  latitude: Float;
  longitude: Float;
  image?: String;
  name: String;
  description?: String;
  address?: String;
  city?: String;
  zip?: String;
  updatedAt: DateTimeOutput;
}

export interface StoresPromise extends Promise<Stores>, Fragmentable {
  latitude: () => Promise<Float>;
  longitude: () => Promise<Float>;
  image: () => Promise<String>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  address: () => Promise<String>;
  city: () => Promise<String>;
  zip: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface StoresSubscription
  extends Promise<AsyncIterator<Stores>>,
    Fragmentable {
  latitude: () => Promise<AsyncIterator<Float>>;
  longitude: () => Promise<AsyncIterator<Float>>;
  image: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  zip: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Payment {
  id: ID_Output;
  paymentId?: String;
  type: String;
  currency?: String;
  merchantOrderId: String;
  customerName?: String;
  tid?: String;
  proofOfSale?: String;
  authorizationCode?: String;
  softDescriptor?: String;
  provider?: String;
  amount?: Int;
  serviceTaxAmount?: Int;
  installments?: Int;
  interest?: Int;
  capture?: Boolean;
  authenticate?: Boolean;
  recurrent?: Boolean;
  receivedDate?: DateTimeOutput;
  status?: Int;
  isSplitted?: Boolean;
  returnMessage?: String;
  returnCode?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface PaymentPromise extends Promise<Payment>, Fragmentable {
  id: () => Promise<ID_Output>;
  paymentId: () => Promise<String>;
  type: () => Promise<String>;
  currency: () => Promise<String>;
  creditCard: <T = CreditCardPromise>() => T;
  customer: <T = UserPromise>() => T;
  merchantOrderId: () => Promise<String>;
  customerName: () => Promise<String>;
  order: <T = OrderPromise>() => T;
  tid: () => Promise<String>;
  proofOfSale: () => Promise<String>;
  authorizationCode: () => Promise<String>;
  softDescriptor: () => Promise<String>;
  provider: () => Promise<String>;
  amount: () => Promise<Int>;
  serviceTaxAmount: () => Promise<Int>;
  installments: () => Promise<Int>;
  interest: () => Promise<Int>;
  capture: () => Promise<Boolean>;
  authenticate: () => Promise<Boolean>;
  recurrent: () => Promise<Boolean>;
  receivedDate: () => Promise<DateTimeOutput>;
  cupom: <T = CupomPromise>() => T;
  status: () => Promise<Int>;
  isSplitted: () => Promise<Boolean>;
  returnMessage: () => Promise<String>;
  returnCode: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface PaymentSubscription
  extends Promise<AsyncIterator<Payment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  paymentId: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  currency: () => Promise<AsyncIterator<String>>;
  creditCard: <T = CreditCardSubscription>() => T;
  customer: <T = UserSubscription>() => T;
  merchantOrderId: () => Promise<AsyncIterator<String>>;
  customerName: () => Promise<AsyncIterator<String>>;
  order: <T = OrderSubscription>() => T;
  tid: () => Promise<AsyncIterator<String>>;
  proofOfSale: () => Promise<AsyncIterator<String>>;
  authorizationCode: () => Promise<AsyncIterator<String>>;
  softDescriptor: () => Promise<AsyncIterator<String>>;
  provider: () => Promise<AsyncIterator<String>>;
  amount: () => Promise<AsyncIterator<Int>>;
  serviceTaxAmount: () => Promise<AsyncIterator<Int>>;
  installments: () => Promise<AsyncIterator<Int>>;
  interest: () => Promise<AsyncIterator<Int>>;
  capture: () => Promise<AsyncIterator<Boolean>>;
  authenticate: () => Promise<AsyncIterator<Boolean>>;
  recurrent: () => Promise<AsyncIterator<Boolean>>;
  receivedDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  cupom: <T = CupomSubscription>() => T;
  status: () => Promise<AsyncIterator<Int>>;
  isSplitted: () => Promise<AsyncIterator<Boolean>>;
  returnMessage: () => Promise<AsyncIterator<String>>;
  returnCode: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProductVariantEdge {
  node: ProductVariant;
  cursor: String;
}

export interface ProductVariantEdgePromise
  extends Promise<ProductVariantEdge>,
    Fragmentable {
  node: <T = ProductVariantPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductVariantEdgeSubscription
  extends Promise<AsyncIterator<ProductVariantEdge>>,
    Fragmentable {
  node: <T = ProductVariantSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface OrderSubscriptionPayload {
  mutation: MutationType;
  node: Order;
  updatedFields: String[];
  previousValues: OrderPreviousValues;
}

export interface OrderSubscriptionPayloadPromise
  extends Promise<OrderSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrderPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrderPreviousValuesPromise>() => T;
}

export interface OrderSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrderSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrderSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrderPreviousValuesSubscription>() => T;
}

export interface ProductConnection {
  pageInfo: PageInfo;
  edges: ProductEdge[];
}

export interface ProductConnectionPromise
  extends Promise<ProductConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductEdge>>() => T;
  aggregate: <T = AggregateProductPromise>() => T;
}

export interface ProductConnectionSubscription
  extends Promise<AsyncIterator<ProductConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductSubscription>() => T;
}

export interface OrderPreviousValues {
  id: ID_Output;
  recurrying: Boolean;
  status: OrderStatus;
  subTotalPrice: Int;
  totalShippingPrice?: Int;
  totalPrice: Int;
  processedAt?: DateTimeOutput;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface OrderPreviousValuesPromise
  extends Promise<OrderPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  recurrying: () => Promise<Boolean>;
  status: () => Promise<OrderStatus>;
  subTotalPrice: () => Promise<Int>;
  totalShippingPrice: () => Promise<Int>;
  totalPrice: () => Promise<Int>;
  processedAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface OrderPreviousValuesSubscription
  extends Promise<AsyncIterator<OrderPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  recurrying: () => Promise<AsyncIterator<Boolean>>;
  status: () => Promise<AsyncIterator<OrderStatus>>;
  subTotalPrice: () => Promise<AsyncIterator<Int>>;
  totalShippingPrice: () => Promise<AsyncIterator<Int>>;
  totalPrice: () => Promise<AsyncIterator<Int>>;
  processedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregatePayment {
  count: Int;
}

export interface AggregatePaymentPromise
  extends Promise<AggregatePayment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePaymentSubscription
  extends Promise<AsyncIterator<AggregatePayment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OrderShippingAddress {
  id: ID_Output;
  street: String;
  number: String;
  complement?: String;
  zip: String;
  district?: String;
  city?: String;
  state?: String;
  country?: String;
  firstName: String;
  lastName: String;
}

export interface OrderShippingAddressPromise
  extends Promise<OrderShippingAddress>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  street: () => Promise<String>;
  number: () => Promise<String>;
  complement: () => Promise<String>;
  zip: () => Promise<String>;
  district: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  country: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  order: <T = OrderPromise>() => T;
}

export interface OrderShippingAddressSubscription
  extends Promise<AsyncIterator<OrderShippingAddress>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  street: () => Promise<AsyncIterator<String>>;
  number: () => Promise<AsyncIterator<String>>;
  complement: () => Promise<AsyncIterator<String>>;
  zip: () => Promise<AsyncIterator<String>>;
  district: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  order: <T = OrderSubscription>() => T;
}

export interface OrderShippingAddressEdge {
  node: OrderShippingAddress;
  cursor: String;
}

export interface OrderShippingAddressEdgePromise
  extends Promise<OrderShippingAddressEdge>,
    Fragmentable {
  node: <T = OrderShippingAddressPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrderShippingAddressEdgeSubscription
  extends Promise<AsyncIterator<OrderShippingAddressEdge>>,
    Fragmentable {
  node: <T = OrderShippingAddressSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface OrderShippingAddressSubscriptionPayload {
  mutation: MutationType;
  node: OrderShippingAddress;
  updatedFields: String[];
  previousValues: OrderShippingAddressPreviousValues;
}

export interface OrderShippingAddressSubscriptionPayloadPromise
  extends Promise<OrderShippingAddressSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrderShippingAddressPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrderShippingAddressPreviousValuesPromise>() => T;
}

export interface OrderShippingAddressSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrderShippingAddressSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrderShippingAddressSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrderShippingAddressPreviousValuesSubscription>() => T;
}

export interface OrderEdge {
  node: Order;
  cursor: String;
}

export interface OrderEdgePromise extends Promise<OrderEdge>, Fragmentable {
  node: <T = OrderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrderEdgeSubscription
  extends Promise<AsyncIterator<OrderEdge>>,
    Fragmentable {
  node: <T = OrderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface OrderShippingAddressPreviousValues {
  id: ID_Output;
  street: String;
  number: String;
  complement?: String;
  zip: String;
  district?: String;
  city?: String;
  state?: String;
  country?: String;
  firstName: String;
  lastName: String;
}

export interface OrderShippingAddressPreviousValuesPromise
  extends Promise<OrderShippingAddressPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  street: () => Promise<String>;
  number: () => Promise<String>;
  complement: () => Promise<String>;
  zip: () => Promise<String>;
  district: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  country: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
}

export interface OrderShippingAddressPreviousValuesSubscription
  extends Promise<AsyncIterator<OrderShippingAddressPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  street: () => Promise<AsyncIterator<String>>;
  number: () => Promise<AsyncIterator<String>>;
  complement: () => Promise<AsyncIterator<String>>;
  zip: () => Promise<AsyncIterator<String>>;
  district: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
}

export interface NewsletterSubscriptionConnection {
  pageInfo: PageInfo;
  edges: NewsletterSubscriptionEdge[];
}

export interface NewsletterSubscriptionConnectionPromise
  extends Promise<NewsletterSubscriptionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NewsletterSubscriptionEdge>>() => T;
  aggregate: <T = AggregateNewsletterSubscriptionPromise>() => T;
}

export interface NewsletterSubscriptionConnectionSubscription
  extends Promise<AsyncIterator<NewsletterSubscriptionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<NewsletterSubscriptionEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateNewsletterSubscriptionSubscription>() => T;
}

export interface ProductVariant {
  id: ID_Output;
  name: String;
  information?: String;
  image?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface ProductVariantPromise
  extends Promise<ProductVariant>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  information: () => Promise<String>;
  image: () => Promise<String>;
  product: <T = ProductPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ProductVariantSubscription
  extends Promise<AsyncIterator<ProductVariant>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  information: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  product: <T = ProductSubscription>() => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CupomEdge {
  node: Cupom;
  cursor: String;
}

export interface CupomEdgePromise extends Promise<CupomEdge>, Fragmentable {
  node: <T = CupomPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CupomEdgeSubscription
  extends Promise<AsyncIterator<CupomEdge>>,
    Fragmentable {
  node: <T = CupomSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PaymentSubscriptionPayload {
  mutation: MutationType;
  node: Payment;
  updatedFields: String[];
  previousValues: PaymentPreviousValues;
}

export interface PaymentSubscriptionPayloadPromise
  extends Promise<PaymentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PaymentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PaymentPreviousValuesPromise>() => T;
}

export interface PaymentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PaymentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PaymentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PaymentPreviousValuesSubscription>() => T;
}

export interface CreditCardConnection {
  pageInfo: PageInfo;
  edges: CreditCardEdge[];
}

export interface CreditCardConnectionPromise
  extends Promise<CreditCardConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CreditCardEdge>>() => T;
  aggregate: <T = AggregateCreditCardPromise>() => T;
}

export interface CreditCardConnectionSubscription
  extends Promise<AsyncIterator<CreditCardConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CreditCardEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCreditCardSubscription>() => T;
}

export interface PaymentPreviousValues {
  id: ID_Output;
  paymentId?: String;
  type: String;
  currency?: String;
  merchantOrderId: String;
  customerName?: String;
  tid?: String;
  proofOfSale?: String;
  authorizationCode?: String;
  softDescriptor?: String;
  provider?: String;
  amount?: Int;
  serviceTaxAmount?: Int;
  installments?: Int;
  interest?: Int;
  capture?: Boolean;
  authenticate?: Boolean;
  recurrent?: Boolean;
  receivedDate?: DateTimeOutput;
  status?: Int;
  isSplitted?: Boolean;
  returnMessage?: String;
  returnCode?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface PaymentPreviousValuesPromise
  extends Promise<PaymentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  paymentId: () => Promise<String>;
  type: () => Promise<String>;
  currency: () => Promise<String>;
  merchantOrderId: () => Promise<String>;
  customerName: () => Promise<String>;
  tid: () => Promise<String>;
  proofOfSale: () => Promise<String>;
  authorizationCode: () => Promise<String>;
  softDescriptor: () => Promise<String>;
  provider: () => Promise<String>;
  amount: () => Promise<Int>;
  serviceTaxAmount: () => Promise<Int>;
  installments: () => Promise<Int>;
  interest: () => Promise<Int>;
  capture: () => Promise<Boolean>;
  authenticate: () => Promise<Boolean>;
  recurrent: () => Promise<Boolean>;
  receivedDate: () => Promise<DateTimeOutput>;
  status: () => Promise<Int>;
  isSplitted: () => Promise<Boolean>;
  returnMessage: () => Promise<String>;
  returnCode: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface PaymentPreviousValuesSubscription
  extends Promise<AsyncIterator<PaymentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  paymentId: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  currency: () => Promise<AsyncIterator<String>>;
  merchantOrderId: () => Promise<AsyncIterator<String>>;
  customerName: () => Promise<AsyncIterator<String>>;
  tid: () => Promise<AsyncIterator<String>>;
  proofOfSale: () => Promise<AsyncIterator<String>>;
  authorizationCode: () => Promise<AsyncIterator<String>>;
  softDescriptor: () => Promise<AsyncIterator<String>>;
  provider: () => Promise<AsyncIterator<String>>;
  amount: () => Promise<AsyncIterator<Int>>;
  serviceTaxAmount: () => Promise<AsyncIterator<Int>>;
  installments: () => Promise<AsyncIterator<Int>>;
  interest: () => Promise<AsyncIterator<Int>>;
  capture: () => Promise<AsyncIterator<Boolean>>;
  authenticate: () => Promise<AsyncIterator<Boolean>>;
  recurrent: () => Promise<AsyncIterator<Boolean>>;
  receivedDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<Int>>;
  isSplitted: () => Promise<AsyncIterator<Boolean>>;
  returnMessage: () => Promise<AsyncIterator<String>>;
  returnCode: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface StoresEdge {
  node: Stores;
  cursor: String;
}

export interface StoresEdgePromise extends Promise<StoresEdge>, Fragmentable {
  node: <T = StoresPromise>() => T;
  cursor: () => Promise<String>;
}

export interface StoresEdgeSubscription
  extends Promise<AsyncIterator<StoresEdge>>,
    Fragmentable {
  node: <T = StoresSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Product {
  id: ID_Output;
  price: Int;
  name: String;
  stockQuantity?: Int;
  description?: String;
  image?: String;
  updatedAt: DateTimeOutput;
}

export interface ProductPromise extends Promise<Product>, Fragmentable {
  id: () => Promise<ID_Output>;
  price: () => Promise<Int>;
  name: () => Promise<String>;
  stockQuantity: () => Promise<Int>;
  variants: <T = FragmentableArray<ProductVariant>>(args?: {
    where?: ProductVariantWhereInput;
    orderBy?: ProductVariantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  description: () => Promise<String>;
  image: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProductSubscription
  extends Promise<AsyncIterator<Product>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  price: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  stockQuantity: () => Promise<AsyncIterator<Int>>;
  variants: <T = Promise<AsyncIterator<ProductVariantSubscription>>>(args?: {
    where?: ProductVariantWhereInput;
    orderBy?: ProductVariantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  description: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateProduct {
  count: Int;
}

export interface AggregateProductPromise
  extends Promise<AggregateProduct>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductSubscription
  extends Promise<AsyncIterator<AggregateProduct>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface PaymentConnection {
  pageInfo: PageInfo;
  edges: PaymentEdge[];
}

export interface PaymentConnectionPromise
  extends Promise<PaymentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PaymentEdge>>() => T;
  aggregate: <T = AggregatePaymentPromise>() => T;
}

export interface PaymentConnectionSubscription
  extends Promise<AsyncIterator<PaymentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PaymentEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePaymentSubscription>() => T;
}

export interface PostPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  isPublished: Boolean;
  title: String;
  body: String;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  isPublished: () => Promise<Boolean>;
  title: () => Promise<String>;
  body: () => Promise<String>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  title: () => Promise<AsyncIterator<String>>;
  body: () => Promise<AsyncIterator<String>>;
}

export interface AggregateNewsletterSubscription {
  count: Int;
}

export interface AggregateNewsletterSubscriptionPromise
  extends Promise<AggregateNewsletterSubscription>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNewsletterSubscriptionSubscription
  extends Promise<AsyncIterator<AggregateNewsletterSubscription>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CartItem {
  id: ID_Output;
  quantity?: Int;
}

export interface CartItemPromise extends Promise<CartItem>, Fragmentable {
  id: () => Promise<ID_Output>;
  cart: <T = CartPromise>() => T;
  product: <T = ProductPromise>() => T;
  quantity: () => Promise<Int>;
  variants: <T = FragmentableArray<ProductVariant>>(args?: {
    where?: ProductVariantWhereInput;
    orderBy?: ProductVariantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CartItemSubscription
  extends Promise<AsyncIterator<CartItem>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  cart: <T = CartSubscription>() => T;
  product: <T = ProductSubscription>() => T;
  quantity: () => Promise<AsyncIterator<Int>>;
  variants: <T = Promise<AsyncIterator<ProductVariantSubscription>>>(args?: {
    where?: ProductVariantWhereInput;
    orderBy?: ProductVariantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AggregateCreditCard {
  count: Int;
}

export interface AggregateCreditCardPromise
  extends Promise<AggregateCreditCard>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCreditCardSubscription
  extends Promise<AsyncIterator<AggregateCreditCard>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface ProductVariantSubscriptionPayload {
  mutation: MutationType;
  node: ProductVariant;
  updatedFields: String[];
  previousValues: ProductVariantPreviousValues;
}

export interface ProductVariantSubscriptionPayloadPromise
  extends Promise<ProductVariantSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductVariantPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductVariantPreviousValuesPromise>() => T;
}

export interface ProductVariantSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductVariantSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductVariantSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductVariantPreviousValuesSubscription>() => T;
}

export interface Cart {
  id: ID_Output;
  updatedAt: DateTimeOutput;
}

export interface CartPromise extends Promise<Cart>, Fragmentable {
  id: () => Promise<ID_Output>;
  products: <T = FragmentableArray<CartItem>>(args?: {
    where?: CartItemWhereInput;
    orderBy?: CartItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  customer: <T = UserPromise>() => T;
}

export interface CartSubscription
  extends Promise<AsyncIterator<Cart>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  products: <T = Promise<AsyncIterator<CartItemSubscription>>>(args?: {
    where?: CartItemWhereInput;
    orderBy?: CartItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  customer: <T = UserSubscription>() => T;
}

export interface ProductPreviousValues {
  id: ID_Output;
  price: Int;
  name: String;
  stockQuantity?: Int;
  description?: String;
  image?: String;
  updatedAt: DateTimeOutput;
}

export interface ProductPreviousValuesPromise
  extends Promise<ProductPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  price: () => Promise<Int>;
  name: () => Promise<String>;
  stockQuantity: () => Promise<Int>;
  description: () => Promise<String>;
  image: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProductPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  price: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  stockQuantity: () => Promise<AsyncIterator<Int>>;
  description: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProductSubscriptionPayload {
  mutation: MutationType;
  node: Product;
  updatedFields: String[];
  previousValues: ProductPreviousValues;
}

export interface ProductSubscriptionPayloadPromise
  extends Promise<ProductSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductPreviousValuesPromise>() => T;
}

export interface ProductSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductPreviousValuesSubscription>() => T;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CartItemEdge {
  node: CartItem;
  cursor: String;
}

export interface CartItemEdgePromise
  extends Promise<CartItemEdge>,
    Fragmentable {
  node: <T = CartItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CartItemEdgeSubscription
  extends Promise<AsyncIterator<CartItemEdge>>,
    Fragmentable {
  node: <T = CartItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface NewsletterSubscription {
  email: String;
}

export interface NewsletterSubscriptionPromise
  extends Promise<NewsletterSubscription>,
    Fragmentable {
  email: () => Promise<String>;
}

export interface NewsletterSubscriptionSubscription
  extends Promise<AsyncIterator<NewsletterSubscription>>,
    Fragmentable {
  email: () => Promise<AsyncIterator<String>>;
}

export interface StoresPreviousValues {
  latitude: Float;
  longitude: Float;
  image?: String;
  name: String;
  description?: String;
  address?: String;
  city?: String;
  zip?: String;
  updatedAt: DateTimeOutput;
}

export interface StoresPreviousValuesPromise
  extends Promise<StoresPreviousValues>,
    Fragmentable {
  latitude: () => Promise<Float>;
  longitude: () => Promise<Float>;
  image: () => Promise<String>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  address: () => Promise<String>;
  city: () => Promise<String>;
  zip: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface StoresPreviousValuesSubscription
  extends Promise<AsyncIterator<StoresPreviousValues>>,
    Fragmentable {
  latitude: () => Promise<AsyncIterator<Float>>;
  longitude: () => Promise<AsyncIterator<Float>>;
  image: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  zip: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Address",
    embedded: false
  },
  {
    name: "AddressType",
    embedded: false
  },
  {
    name: "Cart",
    embedded: false
  },
  {
    name: "CartItem",
    embedded: false
  },
  {
    name: "CreditCard",
    embedded: false
  },
  {
    name: "Cupom",
    embedded: false
  },
  {
    name: "NewsletterSubscription",
    embedded: false
  },
  {
    name: "Order",
    embedded: false
  },
  {
    name: "OrderShippingAddress",
    embedded: false
  },
  {
    name: "OrderStatus",
    embedded: false
  },
  {
    name: "Payment",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  },
  {
    name: "Product",
    embedded: false
  },
  {
    name: "ProductVariant",
    embedded: false
  },
  {
    name: "Role",
    embedded: false
  },
  {
    name: "Stores",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
